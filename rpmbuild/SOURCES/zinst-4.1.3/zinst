#!/bin/bash   
# GSshop package install manager
# Made by Ralf Yang
# ralf.yang@gsshop.com & goody80762@gmail.com
export TIME_STYLE="+%b %d %R"
Barr="==========================================================================="
BARR="###########################################################################"
ROWW="============================================================="

### Base information
### ------ Config Area ----- 11st line here
#
ManagerIP="DISTsERVERIp"
Dist_server="http://DISTsERVERsET"
ZinstBaseRoot="RootDirectorY"
ZinstDIRs="$ZinstBaseRoot/zinst"
ZinstSourceDir="$ZinstBaseRoot/vault/Source"
#
### ------ Config Area ----- 19th line here

Sara_Host="sara.gsenext.com"

### Exception for Docker user
### Docker user can changes the hosts-file to the other hosts-file  as below solution
## RUN cp /etc/hosts /etc/hostsa
## RUN mkdir -p -- /lib-override && cp /lib64/libnss_files.so.2 /lib-override
## RUN sed -i 's:/etc/hosts:/etc/hostsa:g' /lib-override/libnss_files.so.2
## ENV LD_LIBRARY_PATH /lib-override

HostsFile="/etc/hostsa"
	if [[ ! -f $HostsFile ]];then
		HostsFile="/etc/hosts"
	fi

hosts_redefine(){
sudo cat $HostsFile > /tmp/hosts.tmp
sudo sed -i "/$FetchedDistServer/d" /tmp/hosts.tmp
sudo sh -c "echo $ManagerIP $FetchedDistServer >> /tmp/hosts.tmp"
sudo sh -c "cat /tmp/hosts.tmp > $HostsFile"
}

FetchedDistServer=`echo $Dist_server | sed -e "s#http://##g"`
GrepDistHost=`grep "$FetchedDistServer" $HostsFile`
	if [[ $GrepDistHost = "" ]];then
		sudo sh -c "echo $ManagerIP $FetchedDistServer >> $HostsFile"
	else
		DistResut=`echo "$GrepDistHost" | awk '{print $1}'`
		if [[ $DistResut != $ManagerIP ]];then
			hosts_redefine 
		fi
	fi

VERSION=4.1.3
zinst_group=wheel

version_redefine ()
{ echo "$@" | awk -F'.' '{printf("%03d%03d%03d\n", $1,$2,$3); }'; }




exit_abnormal() {
stty echo 
echo " - Command has been canceled -"
exit 1
}

### Break sign catch for line break fix
trap exit_abnormal SIGINT SIGTERM SIGKILL


### Requires server_default_setup package for the account policy
WhoStamp=`sudo cat $ZinstBaseRoot/src/_tmp_acc 2> /dev/null`
	if [[ $WhoStamp = "" ]]
	then
		WhoStamp=`whoami`
	fi

sudo rm $ZinstBaseRoot/src/_tmp_acc 2> /dev/null
export ZinstDir=$ZinstBaseRoot

WhoStamps=`printf "%-14s" "$WhoStamp"`

### Config about of Save file
Save_Dir="$ZinstBaseRoot/z/save"
Save_Filename="zinst-save"
CheckSaveDir=`ls $ZinstBaseRoot/z 2> /dev/null |grep save`
	if [[ $CheckSaveDir = "" ]]
	then
		sudo mkdir -p $Save_Dir
		sudo chgrp $zinst_group $Save_Dir
	fi
	
PackageAll=$@
#########################################################################################
############################ zinst parsing engine start #################################

## Check for the Multi-host password automation
Check_Multi_pass=`echo "$PackageAll" |grep " \-pass"`
	if [[ $Check_Multi_pass != "" ]]; then
		Check_Multi_pw="OK"
		PackageAll=`echo "$PackageAll" | sed -e 's/ -pass/ /g'` 
	fi

Pass_Checker() {
	if [[ $Check_Multi_pw != "OK" ]]; then
		:
	else
		echo " Please insert a password for a work to the destination "
		read -s Zinst_PASSWD
			if [[ $Zinst_PASSWD = "" ]]
			then
				Comm_sshpass="sshpass -p \"$Zinst_PASSWD\""
			else
				Comm_sshpass="sshpass -p $Zinst_PASSWD"
			fi
	fi
}

### Parsing for Host list
HostCheck=`echo "$PackageAll" |grep " \-h \| \-H "`
	if [[ $HostCheck != "" ]]
	then
		PackageArry=(`echo "$PackageAll" | awk -F ' -[h|H]' '{print $1}'`)
		HostArry=(`echo "$PackageAll" | awk -F ' -[h|H]' '{print $2}'`)
		### check sshpass
		sudo sh -c "sshpass -V &> /tmp/.sshpass_check"
		Check_sshpass=`sudo grep "not found" /tmp/.sshpass_check`
			if [[ $Check_sshpass = "" ]]
			then
				Pass_Checker
			else 
				echo $Barr$Barr
				echo " sshpass tool will be install first in this server(local) for the password insert automation as below"
				echo $Barr$Barr
				zinst i sshpass -stable
				Pass_Checker
			fi
	else 
		PackageArry=(`echo $PackageAll`)
	fi
	
### Get Command Type
CommandX=${PackageArry[0]}
### Re-org for Set command
	if [[ $CommandX = "set" ]]
	then
		PackageArry[1]="-set ${PackageArry[1]}"
		PackageArry=( ${PackageArry[@]}  )
	fi

### Hostlist file check
Hostlist_File=`echo $PackageAll | grep " \-H "`
	if [[ $Hostlist_File != "" ]]
	then
		HostlistV="1"
	fi

### Get Package Array
PackageArryNum=${#PackageArry[@]}

### Remove install command
PackageArry[0]=""

MidPackageArry=${PackageArry[@]}

	Counter=1
	SubCounter=0
	while [[ $Counter -lt $PackageArryNum ]]
	do
		CheckMum=${PackageArry[$Counter]}
		CheckMumResult1=`echo "$CheckMum" |egrep "^-"`
			### Set value patch
			if [[ $CheckMumResult1 = "-set" ]]
			then
				PackageArrySet[$SubCounter]=${PackageArry[$Counter]}
				PackageArrySet[$SubCounter+1]=${PackageArry[$Counter+1]}
				PackageArry[$Counter]=""
				PackageArry[$Counter+1]=""
				let SubCounter=SubCounter+2
				let Counter=Counter+1
			elif [[ $CheckMumResult1 != "" ]]
			then
				PackageArryOption[$SubCounter]=${PackageArry[$Counter]}
				PackageArry[$Counter]=""
				let SubCounter=SubCounter+1
			fi
	let Counter=Counter+1
	done

	HostOptionCheck=`echo "${HostArry[@]}" |grep "\-set\|\-same\|\-downgrade\|\-stable"`
	HostArryNum=${#HostArry[@]}
	if [[ $HostOptionCheck != "" ]]
	then
	HostCounter=0
		while [[ $HostCounter -lt $HostArryNum ]]
		do
			CheckMum=${HostArry[$HostCounter]}
			CheckMumResult1=`echo "$CheckMum" |egrep "^-"`
			### Set value patch
			if [[ $CheckMumResult1 = "-set" ]]
			then
				PackageArrySet[$SubCounter]=${HostArry[$HostCounter]}
				PackageArrySet[$SubCounter+1]=${HostArry[$HostCounter+1]}
				HostArry[$HostCounter]=""
				HostArry[$HostCounter+1]=""
				let SubCounter=SubCounter+2
				let HostCounter=HostCounter+1
			elif [[ $CheckMumResult1 != "" ]]
			then
				PackageArryOption[$SubCounter]=${HostArry[$HostCounter]}
				HostArry[$HostCounter]=""
			fi
			let HostCounter=HostCounter+1
		done
	fi

	### Hostlist file check
	if [[ $HostlistV = "1" ]]
	then
		HostFileCheck=`sudo cat ${HostArry[@]} |sed -e  '/^$/d' -e '/^#/d'  | fgrep -v "^#" |fgrep -v "^$" 2> $ZinstDIRs/.Hostcheck 1> /dev/null ;sudo cat $ZinstDIRs/.Hostcheck`
		if [[ $HostFileCheck = "" ]]
		then
			HostArry=(`sudo cat ${HostArry[@]} |sed -e  '/^$/d' -e '/^#/d'  `)
		else 
			echo "$Barr"
			echo " Hostname is not correct - (${HostArry[@]}) or"
			echo " Requires filename for listing exactly. Please make sure the filename "
			echo "$Barr"
			echo ""
			exit 0;
		fi
		sudo rm -f $ZinstDIRs/.Hostcheck
	fi

### Hostname change to regexp in Bash
Hostlist=${HostArry[@]}
HostCount=${#HostArry[@]}
	CountExt=0
	while [ $CountExt -le $HostCount ]
	do
		ServerOrd=`echo ${HostArry[$CountExt]} |grep "\["`
		if [[ $ServerOrd != "" ]]
		then
			Sname=`echo ${HostArry[$CountExt]} | awk -F '[' '{print $1}'`
		fi

	let CountExt=CountExt+1
	done

### re-define array
HostArry=(${HostArry[@]})

### Change syntax for Bash regexp
DashParser=`echo ${HostArry[@]}| sed -e 's/\[[[:alnum:]]*.\-/&../g' | sed -e 's/\-\.\./\.\./g' -e 's/\[[[:alnum:]]*.\.\.[[:alnum:]]*.\,/{&}/g' -e 's/\,\}/},/g'`
Result=`echo $DashParser | sed -e 's/\[/\{/g' -e 's/\]/\}/g'`
HostChanged=( `eval echo $Result` )

### Array re-org
ZPackages=${PackageArry[@]}
PackageArry=($ZPackages)

ZOptions=${PackageArryOption[@]}
PackageArryOption=($ZOptions)

Zset=${PackageArrySet[@]}
PackageArrySet=($Zset)

ZHosts=${HostChanged[@]}
HostChanged=($ZHosts)

### Deploy the varibles
ZPackages=${PackageArry[@]}

ZOptions=${PackageArryOption[@]}
Zset=${PackageArrySet[@]}
ZHosts=${HostChanged[@]}
History_LOG="$ZinstBaseRoot/vault/Source/.zinst_history_log"

### Alias for existed fuction
ProcessPkg=$ZPackages
ProcessPkgNum=${#PackageArry[@]}
PureOption=`echo $ZOptions | sed -e 's/-stable //g'`
Allcommand="$CommandX $ZPackages $ZOptions $Zset"

############################  zinst parsing engine end ##################################
#########################################################################################
### History File reset for permission
sudo chmod 664 $History_LOG 2> /dev/null
sudo chgrp $zinst_group $History_LOG 2> /dev/null

Package_Parse_Check(){
### Package name check 
Parse_Checker=$*
	ParsedPkgVerChk=`echo "$Parse_Checker" | egrep "\-[0-9.*]*.zinst\$"`
	if [[ $ParsedPkgVerChk != "" ]]
	then 
		ParsedPkgZinstFind=`cat $CurrPkgList | grep "^$Parse_Checker" | tail -1`
		if [[ $ParsedPkgZinstFind = "" ]]
		then
			echo "$BARR"
			echo "Which one is correct as you want in below list ( $Parse_Checker )"
			echo "$ROWW"
			zinst find $Parse_Checker
			echo "$BARR"
			echo ""
			exit 0
		else
			Parse_Result="$ParsedPkgZinstFind"
		fi
	else
		ParsedPkgZinstFind=`cat $CurrPkgList | grep "^$Parse_Checker-" | tail -1`
		if [[ $ParsedPkgZinstFind = "" ]]
		then
			echo "$BARR"
			echo "Which one is correct as you want in below list ( $Parse_Checker )"
			echo "$ROWW"
			zinst find $Parse_Checker
			echo "$BARR"
			exit 0
		else
			Parse_Result="$ParsedPkgZinstFind"
		fi
	fi
}


PrintCheck(){
Parse_Result=$@
	PkgCheckTime=`echo "$PkgCheckArry" |grep " $Parse_Result"`
#echo "echo \"$PkgCheckArry\" |grep \" $Parse_Result\""
	if [[ $PkgCheckTime = "" ]]
	then
		PkgCheckArry="$PkgCheckArry $Parse_Result"
		printf "%-60s %-1s %-10s %-1s\n" "| $Parse_Result" "|" "- Checked" "|"
	fi
}


### Multi file copier command
	if [[ $CommandX = "mcp" ]]
	then
		if [[ $ZHosts != "" ]]
		then
			TargetDir=`echo $ZPackages | awk '{print $NF}'`
			Source=`echo $ZPackages | awk '{for (i=1;i<NF;i=i+1) print $i}'`
			SourceNum=`echo $Source | awk '{print NF}' `
			HostNum=`echo $ZHosts | awk '{print NF}'`
			Hcount=1
				while [[ $Hcount -le $HostNum ]]
				do
					TartgetHost=`echo $ZHosts | awk '{print $'$Hcount'}'`
					echo ""
					echo "[:: $TartgetHost  ::]"		
					Scount=1
						while [[ $Scount -le $SourceNum ]]
						do
							PartedSource=`echo $Source |awk '{print $'$Scount'}'`
							Check_Files=`ls $PartedSource`
								if [[ $Check_Files != $PartedSource  ]]
								then
									echo " =============  $PartedSource File not exist ============="
									exit 0;
								fi
							$Comm_sshpass scp $PartedSource $TartgetHost:$TargetDir	
							let Scount=Scount+1
						done
					let Hcount=Hcount+1
					Localhost=$HOSTNAME
					Command_p="> mcp"
					SourceFull=(`echo "$Source"`)
					IPaddr=`/sbin/ifconfig |grep " addr:" |grep Bcast |head -1 | awk '{print $2}'|awk  -F ':' '{print $2}'`
					sed -i "/$TartgetHost/d" ~/.ssh/known_hosts 2> /dev/null
					$Comm_sshpass ssh -oStrictHostKeyChecking=no $TartgetHost "echo -e \"`date +%Y.%m.%d_%T`\t $WhoStamps : $Command_p - From $IPaddr:  ${SourceFull[@]} -> $TargetDir \" >> $History_LOG"
				done
		else
			echo "$ROWW"
			echo " Hostname requires"
			echo "$ROWW"
		fi
		exit 0;
	fi
	CheckRB=`echo "$CommandX" |grep "roll"`
	if [[ $CheckRB != "" ]]
	then
		if [[ $ZHosts != "" ]]
		then
			TargetDir="~/"
			Source=`echo $ZPackages | awk '{print $1}'`
			HostNum=`echo $ZHosts | awk '{print NF}'`
			Hcount=1
				while [[ $Hcount -le $HostNum ]]
				do
					TartgetHost=`echo $ZHosts | awk '{print $'$Hcount'}'`
					echo ""
					echo "[:: $TartgetHost ::]"		
					Scount=1
					$Comm_sshpass scp $ZPackages $TartgetHost:~/ 2> /dev/null
					let Hcount=Hcount+1
					Localhost=$HOSTNAME
					Command_p="> Sent a rollback file"
					SourceFull=(`echo "$Source"`)
					IPaddr=`/sbin/ifconfig |grep " addr:" |grep Bcast |head -1 | awk '{print $2}'|awk  -F ':' '{print $2}'`
					sed -i "/$TartgetHost/d" ~/.ssh/known_hosts 2> /dev/null
					$Comm_sshpass ssh -oStrictHostKeyChecking=no $TartgetHost "echo -e \"`date +%Y.%m.%d_%T`\t $WhoStamps : $Command_p - From $IPaddr:  $SourceFull -> $TargetDir \" >> $History_LOG"
				done
		fi
	fi

################################# Hostlist checker ######################################
RotaCommand=$Allcommand
szinst="zinst"
RotaBeacon=0
	if [[ $ZHosts != "" ]]
	then 
		Count=0
		Max=${#HostChanged[@]}
			while [[ $Count -lt $Max ]];
			do
				HostF=$WhoStamp@${HostChanged[$Count]}
				## ssh connection check
				sed -i "/$TartgetHost/d" ~/.ssh/known_hosts 2> /dev/null
				$Comm_sshpass ssh -oStrictHostKeyChecking=no $HostF "grep ^VERSION /usr/bin/zinst" > $ZinstBaseRoot/vault/Source/ssh_conn_test.log 2>&1
				CheckConnection=`sudo cat $ZinstBaseRoot/vault/Source/ssh_conn_test.log |grep "No route\|not known\|Connection refused"`
					if [[ $CheckConnection != "" ]]
					then
						echo $Barr	
						echo "It couldn't connect this host($HostF). Please check this hostname"
						echo $Barr	
					else
						## Install start with target host ##
						## Check the Package or Distribution server
						## Package scp to destination
						zinst_checkDes=`sudo grep ^VERSION $ZinstBaseRoot/vault/Source/ssh_conn_test.log | sed -e 's/VERSION=//g' 2> /dev/null`
							if [[ $zinst_checkDes != "" ]]
							then
								zinst_checkLoc=`sudo cat /usr/bin/zinst 2> /dev/null |grep ^VERSION | sed -e 's/VERSION=//g'`
									if [[ $(version_redefine "$zinst_checkDes") < $(version_redefine "$zinst_checkLoc") ]];
									then
										$Comm_sshpass scp /usr/bin/zinst $HostF:/usr/bin
									fi
							else
								$Comm_sshpass scp /usr/bin/zinst $HostF:/usr/bin/ 2> /dev/null
							fi

						#### Check SSH command ########
							if [[ $CommandX = "ssh" ]]
							then
								RotaCommand=$MidPackageArry
								szinst=""
							fi

						CheckDesDIR=`sudo grep " cannot access " $ZinstBaseRoot/vault/Source/ssh_conn_test.log`
							if [[ $CommandX != "" ]]
							then		
								sed -i "/$TartgetHost/d" ~/.ssh/known_hosts 2> /dev/null
        						$Comm_sshpass ssh -oStrictHostKeyChecking=no -t $HostF "sudo mkdir -p $ZinstBaseRoot/vault/Source;sudo chgrp -R $zinst_group $ZinstBaseRoot/vault" 2> /dev/null
							fi

        					echo ""
						## Delete temporary connection checker file
     						sudo rm -f $ZinstBaseRoot/vault/Source/ssh_conn_test.log
						#### Local package scp to destination ####
						LocalPkg=`echo $RotaCommand | sed -e 's/^[a-z]* //g'`
						LocalPkg_Num=`echo $LocalPkg | awk '{print NF}'`

						CountSub=1
							while [[ $CountSub -le $LocalPkg_Num ]]
							do
								LocalRealPkg=`echo $LocalPkg | awk '{print $'$CountSub'}'`
									if [[ $CommandX = "^ssh$" ]]
									then
										LocalPkg_chk=`cd $PWD;ls |grep "^$LocalRealPkg"`
									fi

									if [[ $LocalPkg_chk != "" ]]
									then
										$Comm_sshpass scp $LocalRealPkg $HostF:$ZinstSourceDir/
									fi

								let CountSub=CountSub+1
							done;

							#### Check set command for destination work ########
							if [[ $RotaBeacon = 0 ]];then
								if [[ $CommandX = "set" ]]
								then
									RotaCommand=`echo $RotaCommand | sed -e 's/ \-set//1'`
									RotaBeacon=1
								fi
							fi

						MultiCheck=`echo $ZOptions |grep -e "-multi"`
							if [[ $MultiCheck = "" ]]
							then
								sed -i "/$TartgetHost/d" ~/.ssh/known_hosts 2> /dev/null
								$Comm_sshpass ssh -oStrictHostKeyChecking=no -t $HostF "echo [ :: $HostF :: ];cd $ZinstSourceDir; source /etc/profile ;$szinst $RotaCommand" 2> /dev/null
								IPaddr=`/sbin/ifconfig |grep " addr:" |grep Bcast |head -1 | awk '{print $2}'|awk  -F ':' '{print $2}'`
									if [[ $szinst = "" ]];then
										DestStamp="> SSH -"
									else
										DestStamp=" L"
									fi

								sed -i "/$TartgetHost/d" ~/.ssh/known_hosts 2> /dev/null
 							    $Comm_sshpass ssh -oStrictHostKeyChecking=no -t $HostF "echo -e \"`date +%Y.%m.%d_%T`\t $WhoStamps : $DestStamp From $IPaddr: $szinst $RotaCommand\" >> $History_LOG" 
							else
								### For multi-task
								sed -i "/$TartgetHost/d" ~/.ssh/known_hosts 2> /dev/null
								$Comm_sshpass ssh -oStrictHostKeyChecking=no -t $HostF "echo [ :: $HostF :: ];cd $ZinstSourceDir; source /etc/profile ;$szinst $RotaCommand" & 
							fi

					fi
				let Count=Count+1
			done
		exit 0;
	fi

Check_Package_Deps(){
### Package input
ChkDepFromZicf=$1

### Define Syntax with version
Package_Parse_Check $ChkDepFromZicf
ChkDepFromZicf=$Parse_Result

Gather=( $Gather ${CheckDep[@]} )
	### CheckDep Define
	if [[ ! -f $CurrPkgDiR/$ChkDepFromZicf.zicf ]]
	then
		wget "$Dist_server/checker/$ChkDepFromZicf.zicf" --directory-prefix=$CurrPkgDiR 2> /dev/null
		CheckDep=(`cat $CurrPkgDiR/$ChkDepFromZicf.zicf 2> /dev/null |grep '^ZINST requires' | sed 's/ZINST requires pkg //g'`)
	else
		sudo rm -f $CurrPkgDiR/$ChkDepFromZicf.zicf
		wget "$Dist_server/checker/$ChkDepFromZicf.zicf" --directory-prefix=$CurrPkgDiR 2> /dev/null
		CheckDep=(`cat $CurrPkgDiR/$ChkDepFromZicf.zicf 2> /dev/null |grep '^ZINST requires' | sed 's/ZINST requires pkg //g'`)
	fi

	if [[ ${CheckDep[@]} = "" ]];then
		return 1
	else	
		recv_ctn=0
		Lood_test=( $ChkDepFromZicf ${CheckDep[@]} )
			while [ $recv_ctn -lt ${#Lood_test[@]} ];do
				Check_Package_Deps ${Lood_test[$recv_ctn]}
			let recv_ctn=$recv_ctn+1
			done
	fi

### Print Checked Package name
PrintCheck $Parse_Result
}


#########################################################################################
############################# zinst re-org engine start #################################
Package_Array_Sort(){
BoxPkg=$ZPackages
BoxPkgArry=( $BoxPkg )

CurrPkgList="$ZinstBaseRoot/vault/Source/.current_package.list"
CurrPkgDiR="$ZinstBaseRoot/vault/zinst/index"

StockPkg="/tmp/stockpkg"
touch $StockPkg

### Package list up
zinst find | sort --version-sort > $CurrPkgList

	### Loop for each package sort
	BoxCounter=0
	while [ $BoxCounter -lt ${#BoxPkgArry[@]} ]
	do
		Package_Parse_Check ${BoxPkgArry[$BoxCounter]}
		BoxPkgArry[$BoxCounter]=$Parse_Result
		PrintCheck $Parse_Result
		#### Start here for fetch the information
		### Dependency check by zicf file from distribution server
			IndexFileChk=`ls $CurrPkgDiR/${BoxPkgArry[$BoxCounter]}.zicf 2> /dev/null`
			if [[ $IndexFileChk = "" ]]
			then
				wget "$Dist_server/checker/${BoxPkgArry[$BoxCounter]}.zicf" --directory-prefix=$CurrPkgDiR 2> /dev/null
				CheckDep=(`cat $CurrPkgDiR/${BoxPkgArry[$BoxCounter]}.zicf 2> /dev/null |grep '^ZINST requires' | sed 's/ZINST requires pkg //g'`)
			else
				CheckDep=(`cat $CurrPkgDiR/${BoxPkgArry[$BoxCounter]}.zicf 2> /dev/null |grep '^ZINST requires' | sed 's/ZINST requires pkg //g'`)
			fi
		

		### Check existed dependency package 
		if [[ ${CheckDep[@]} != ""  ]]
		then
			### Loop for requires package check
			SubBoxCounter=0
			while [ $SubBoxCounter -lt ${#CheckDep[@]} ]
			do
				### version check & define
				SubCt=0
				while [ $SubCt -lt ${#BoxPkgArry[@]} ]
				do
					## check verion in line
					Package_Parse_Check ${BoxPkgArry[$SubCt]}
					BoxPkgArry[$SubCt]=$Parse_Result
					PrintCheck $Parse_Result
				let SubCt=$SubCt+1
				done

				### Package Parse check such as a version 
				Package_Parse_Check ${CheckDep[$SubBoxCounter]}
				CheckDep[$SubBoxCounter]=$Parse_Result
				PrintCheck $Parse_Result
	
				## Check Existed package in line
				CheckBoxPkg=`echo "${BoxPkgArry[@]}" | grep "${CheckDep[$SubBoxCounter]}" `

				## Check Existed package in local
				CurrCheckBoxPkg=`zinst ls |grep -w \`echo "${CheckDep[$SubBoxCounter]}" | awk -F'-' '{print $1}'\``
				SubFetchFile=`echo "${CheckDep[$SubBoxCounter]}"`

					SubIndexFileChk=`ls $CurrPkgDiR/$SubFetchFile.zicf 2> /dev/null`
					if [[ $SubIndexFileChk = "" ]]
					then
						wget "$Dist_server/checker/$SubFetchFile.zicf" --directory-prefix=$CurrPkgDiR 2> /dev/null
						SudDepChk=(`cat $CurrPkgDiR/$SubFetchFile.zicf 2> /dev/null |grep '^ZINST requires' | sed 's/ZINST requires pkg //g'`)
					else
						SudDepChk=(`cat $CurrPkgDiR/$SubFetchFile.zicf 2> /dev/null |grep '^ZINST requires' | sed 's/ZINST requires pkg //g'`)
					fi
		
				### Package version check & define
				SubCLe=0
				while [ $SubCLe -lt ${#SudDepChk[@]} ]
				do
					if [[ ${SudDepChk[$SubCLe]} != "" ]]
					then
						CurrSubSecPkgChk=`zinst ls -w |grep "${SudDepChk[$SubCLe]}" | awk '{print $4}' `
						SubSecPkgChk=`echo "${BoxPkgArry[@]}" | grep "${SudDepChk[$SubCLe]}"`
						if [[ $CurrSubSecPkgChk = "" ]]
						then
							if [[ $SubSecPkgChk = "" ]]
							then
								echo " $Barr"
								echo "  Notice: Package requires as below"
								echo "   ${SudDepChk[$SubCLe]}" 
								echo " $Barr"
								echo ""
								exit 0;
							fi
						fi
					fi
				let SubCLe=$SubCLe+1
				done

				### Switch array
				if [[ $SubBoxCounter = 0 ]]
				then
					if [[ $CurrCheckBoxPkg = "" ]]
					then
						if [[ $CheckBoxPkg != "" ]]
						then
						### Check in-line package include
						ChkinArry=`echo "$CheckBoxPkg" |grep -w "${CheckDep[$SubBoxCounter]}"`
							if [[ $ChkinArry != "" ]]; then
								echo "${CheckDep[$SubBoxCounter]} ${BoxPkgArry[$BoxCounter]}" >> $StockPkg
							else
							### Require package check in local
							CurrSubSecPkgChk=`zinst ls -w |grep "${CheckDep[$SubBoxCounter]}" | awk '{print $4}' `
								if [[ $CurrSubSecPkgChk = "" ]];then
									echo "$Barr"
									echo "  Notice: Package requires as below !!!!"
									echo "   ${CheckDep[$SubBoxCounter]}"
									echo "$Barr"
									echo ""
									exit 0;
								else
									echo "${BoxPkgArry[$BoxCounter]} tmp_beacon" >> $StockPkg
								fi
							fi
						else
							echo "$Barr"
							echo "  Notice: Package requires as below"
							echo "   ${CheckDep[$SubBoxCounter]}"
							echo "$Barr"
							echo ""
							exit 0;
						fi
					else
						ChkinArry=`echo " $CheckBoxPkg" |grep " ${CheckDep[$SubBoxCounter]}"`
							if [[ $ChkinArry != "" ]]; then
								echo "${CheckDep[$SubBoxCounter]} ${BoxPkgArry[$BoxCounter]}" >> $StockPkg
							else
							CurrSubSecPkgChk=`zinst ls |grep -w "${SudDepChk[$SubCLe]}" | awk '{print $4}' `
								if [[ $CurrSubSecPkgChk = "" ]];then
									echo "$Barr"
									echo "  Notice: Package requires as below"
									echo "   ${CheckDep[$SubBoxCounter]}"
									echo "$Barr"
									echo ""
									exit 0;
								else
									echo "${BoxPkgArry[$BoxCounter]} tmp_beacon" >> $StockPkg
								fi
							fi
					fi
				else
					### Not depens on the package
					if [[ $CurrCheckBoxPkg = "" ]]
					then
						if [[ $CheckBoxPkg != "" ]]
						then
							echo "${CheckDep[$SubBoxCounter]} ${BoxPkgArry[$BoxCounter]}" >> $StockPkg
						else
								echo "$Barr"
								echo "  Notice: Package requires as below" 
								echo "   ${CheckDep[$SubBoxCounter]}"
								echo "$Barr"
								echo ""
								exit 0;
						fi
					fi
				fi
				let SubBoxCounter=$SubBoxCounter+1
			done
		else
			Package_Parse_Check ${BoxPkgArry[$BoxCounter]}
			BoxPkgArry[$BoxCounter]=$Parse_Result
			PrintCheck $Parse_Result
			echo "${BoxPkgArry[$BoxCounter]} tmp_beacon" >> $StockPkg
		fi
	let BoxCounter=$BoxCounter+1
	done

BoxPkgArry=( `tsort $StockPkg | sed -e '/tmp_beacon/d'`)

### Remove temporary file
rm -f $CurrPkgList $CurrPkgDiR 2> /dev/null
rm -f $StockPkg

AllPkgSortedResult="${BoxPkgArry[@]}"

}

#########################################################################################
############################# zinst re-org engine end ###################################

## Package Version making auto
StableOptionCheck=`echo "${PackageArryOption[@]}" |grep "\-stable"`
	CheckCommandX=`echo $CommandX |egrep "^i"`
	if [[ $CheckCommandX != "" ]]
	then
		if [[ $StableOptionCheck != "" ]]
		then
			echo ""
			echo $Barr
			Package_Array_Sort $ZPackages
			ProcessPkg=$AllPkgSortedResult
		fi
	fi

 

Save_Restore_file(){
### Save a restore file 
Save_File_num=`ls $Save_Dir/ |egrep ^$Save_Filename | awk '{print NR}' |tail -1`
    if [[ $Save_File_num = ""  ]];
    then
        Save_File_num="0"
    fi
MakeANum=1
let MakeANum=MakeANum+$Save_File_num
Naming="$Save_Filename.$MakeANum"

echo "# --- Last touched by $WhoStamps --- " > $Save_Dir/$Naming
echo "# --- Last command \" zinst $PackageAll \" " >> $Save_Dir/$Naming
echo "# Date: `date +%Y.%m.%d_%T` " >> $Save_Dir/$Naming
echo "#"  >> $Save_Dir/$Naming
echo "# zinst package installer all-configuration backup-list for the package restore" >> $Save_Dir/$Naming
zinst ls | awk '{print "Package install",$4".zinst"}' >> $Save_Dir/$Naming
echo "- - - " >> $Save_Dir/$Naming
zinst set | awk 'NR>1{print "Package setting",$1}' >> $Save_Dir/$Naming
    if [[ $Save_File_num != "0"  ]];
    then
		CheckSameSave=`diff $Save_Dir/$Save_Filename.$Save_File_num  $Save_Dir/$Naming 2> /dev/null`
			if [[ $CheckSameSave = "" ]]
			then
				sudo rm -f $Save_Dir/$Naming
			fi
	fi
}

Pkg_Install(){
	CounterAll=1

	while [[ $CounterAll -le $ProcessPkgNum ]]
	do
		Package_list=`echo $ProcessPkg |awk '{print $'$CounterAll'}'`
		Package_org=`echo "$Package_list" |awk -F ".zinst" '{print $1}'`
		Package_orgS=`echo "$Package_list" |awk -F "-" '{print $1}'`

		## Check the Package or Distribution server
		Pkg_result=`cd $PWD;ls |grep $Package_list`
			if [[ $Pkg_result = "" ]];
			then
				DIST=$Dist_server
			else
				DIST=`pwd`
			fi
		ZICF=`echo $Package_list | awk -F "-" '{print $1".zicf"}'`

		############################## Install start without target host ##################################################
		ZinstName=`echo $Package_list | awk -F ".zinst" '{print $1}'`;
		ZinstOrgName=`echo $Package_list | awk -F "-" '{print $1}'`;
			if [[ $Pkg_result != $Package_list ]]
			then
				###  check package by wget ###
				Package_RC=`wget  --spider  $Dist_server/$Package_list -o $ZinstSourceDir/tmp_wget_check ;sudo cat $ZinstSourceDir/tmp_wget_check |grep Remote ;sudo rm -f $ZinstSourceDir/tmp_wget_check`
			fi

			#### check local zinst file
			if [[ $Pkg_result = $Package_list ]]
			then
				Package_RC="Remote file exists."
				alias cp=cp
				CheckDir=`ls $ZinstSourceDir| grep $ZinstName$`
					if [[ $CheckDir = "" ]]
					then
						sudo mkdir $ZinstSourceDir/$ZinstName
					fi
 				sudo cp -f $DIST/$Package_list $ZinstBaseRoot/vault/Source/$ZinstName/$Package_list
	 			sudo chgrp -R $zinst_group $ZinstBaseRoot/vault/Source/$ZinstName
	 			sudo chmod g+w $ZinstBaseRoot/vault/Source/$ZinstName
			fi

			if [[ $Package_RC = "Remote file does not exist -- broken link!!!" ]]
			then
				echo "  "
				echo "  $Package_list Package has not found."
				echo "  "
				exit 0;
			fi
		## Check a same version Package
		Existed_pkg=`ls -l $ZinstDIRs 2> /dev/null |grep ^l | grep "/$Package_orgS-" | awk  '{print $11}' | awk -F '/' '{print $NF}'`
		Existed_pkg_version=`echo "$Existed_pkg" | awk -F'-' '{print $2}'`
		Origin_pkg_version=`echo "$Package_org" | awk -F'-' '{print $2}'`
		echo ""
		echo ----- $Package_list -----
		ZICF=`echo $Package_list | awk -F "-" '{print $1".zicf"}'`
			if [[ $(version_redefine $Origin_pkg_version) = $(version_redefine $Existed_pkg_version) ]];then 
			#########  -same -live option check  ################
				if [[ $PureOption != "-same" ]]
				then
					echo "$Barr"
					echo "The Server has a same version of package already"
					echo "Please insert an option like this \"-same\" if you want to install continue."
					echo "$Barr"
					exit 0;
				fi
			fi
  
			if [[ $(version_redefine $Origin_pkg_version) < $(version_redefine $Existed_pkg_version) ]];then 
			#########  -downgrade option check  ################
				if [[ $PureOption != "-downgrade" ]]
				then
					echo "$Barr"
					echo "Your package is a older version then exists package version"
					echo "Please insert an option like this \"-downgrade\" if you want to install continue."
					echo "$Barr"
					exit 0;
				fi
			fi
 
		## Unpacking
		mkdir -p $ZinstBaseRoot/vault/Source/$ZinstName
		mkdir -p $ZinstDIRs
		mkdir -p $ZinstBaseRoot/src
		sudo chgrp -R $zinst_group $ZinstBaseRoot/vault/Source/$ZinstName
		sudo chgrp $zinst_group $ZinstDIRs
		sudo chgrp $zinst_group $ZinstBaseRoot/src

		##If you have distribution server. you can setup as below.
		alias cp=cp

		cd $ZinstSourceDir/$ZinstName/
			if [[ $Pkg_result != $Package_list ]]
			then
				sudo wget -N $Dist_server/$Package_list -o $ZinstSourceDir/tmp_wget_check;sudo rm -f $ZinstSourceDir/tmp_wget_check
			fi

			#########  -same -live option check  ################
			if [[ $PureOption != "-same" ]]
			then
				cd $ZinstSourceDir/$ZinstName/
				sudo rm -f $ZinstSourceDir/$ZinstName/$Package_list
					if [[ $Pkg_result != $Package_list ]]
					then
						sudo wget -N $Dist_server/$Package_list -o $ZinstSourceDir/tmp_wget_check;sudo rm -f $ZinstSourceDir/tmp_wget_check
					else
						sudo mv -f $DIST/$Package_list $ZinstBaseRoot/vault/Source/$ZinstName/$Package_list	### local file copy
					fi
			fi

		cd $ZinstBaseRoot/vault/Source/$ZinstName
		sudo tar zxf $ZinstBaseRoot/vault/Source/$ZinstName/$Package_list
		sudo rm -rf $ZinstBaseRoot/vault/Source/$ZinstName/$Package_list
		sudo rm -Rf $ZinstDIRs/$ZinstOrgName
		sudo ln -sf $ZinstBaseRoot/vault/Source/$ZinstName $ZinstDIRs/$ZinstOrgName
		cd $ZinstDIRs/$ZinstOrgName; sudo chmod 644 $ZICF
 
		## Value set
		Packagename=`sudo cat $ZICF |grep ^PACKAGENAME |awk '{print $3}'`
		ZinstPackageDir="$ZinstDIRs/$Packagename"
		Version=`sudo cat $ZICF |grep ^VERSION |awk '{print $3}'`
		Authorized=`sudo cat $ZICF |grep ^AUTHORIZED |awk '{print $3}'` 
		Owner=`sudo cat $ZICF |grep ^OWNER |awk '{print $3}'`
			## Useradd for package install
			CheckOwner=`sudo cat /etc/passwd | awk -F':' '{print $1}' |egrep "^$Owner$"`
			if [[ $CheckOwner = "" ]];then
				sudo adduser -M "$Owner"
			fi
		Group=`sudo cat $ZICF |grep ^GROUP |awk '{print $3}'`
			## groupadd for package install
			CheckGroup=`sudo cat /etc/group | awk -F':' '{print $1}' |egrep "^$Group$"`
			if [[ $CheckGroup = "" ]];then
				sudo groupadd "$Group"
			fi
		Perm=`sudo cat $ZICF |grep ^PERM |awk '{print $3}'`
		Custodian=`sudo cat $ZICF |grep ^CUSTODIAN |awk '{print $3}'`
		Crontab=`sudo cat $ZICF |grep ^CRON |awk 'NR==1{print $1}'`
		CrontabRow=`sudo cat $ZICF |grep ^CRON |awk '{print NR}' |tail -1`
		Description=`sudo cat $ZICF |grep ^DESCRIPTION |awk '{print $0}'`
		## Directory Group Permission
		sudo chgrp $Group $ZinstBaseRoot/vault/Source/$ZinstName $ZinstDIRs/$ZinstOrgName

		### zinst default checkr
		## zinst set checker
		ZinstSetCheck=`sudo cat $ZinstBaseRoot/vault/zinst/zinst_set.list 2> /dev/null | grep ZinstSet | awk '{print $1}'`
		ZinstSetTitle="#==========================ZinstSet==========================="
			if [[ $ZinstSetCheck != $ZinstSetTitle ]];
			then
				sudo mkdir -p $ZinstBaseRoot/vault/zinst/
				sudo chgrp $zinst_group $ZinstBaseRoot/vault/zinst/
				echo "$ZinstSetTitle" > $ZinstBaseRoot/vault/zinst/zinst_set.list
				sudo chgrp $zinst_group $ZinstBaseRoot/vault/zinst/zinst_set.list
				echo "   -------> $ZinstBaseRoot/vault/zinst/zinst_set.list has been created for the zinst :)"
				echo " "
			fi
		sudo mkdir -p $ZinstBaseRoot/vault/Source $ZinstBaseRoot/zinst
		sudo chgrp $zinst_group $ZinstBaseRoot/vault/Source $ZinstBaseRoot/zinst

		### Dependency-checker file
		## zinst dependency checker
		ZinstDepCheck=`ls -ali  $ZinstBaseRoot/vault/zinst/ |grep .dependency.list`
		ZinstDepTitle="#==========================ZinstDep==========================="
			if [[ $ZinstDepCheck = "" ]];
			then
				sudo mkdir -p $ZinstBaseRoot/vault/zinst/
				sudo chgrp $zinst_group $ZinstBaseRoot/vault/zinst/
				echo "$ZinstDepTitle" > $ZinstBaseRoot/vault/zinst/.dependency.list
				sudo chgrp $zinst_group $ZinstBaseRoot/vault/zinst/.dependency.list
				echo " "
			fi
		
		### Make a Blank .file.list
		echo "echo \" $Packagename-$Version package install ==>>> \" " > .file.list
		echo "export ZinstDir=$ZinstBaseRoot " >> .file.list
		sudo chgrp $zinst_group .file.list
		sudo chmod 664 .file.list
		## Package Dependency check - on no-over write
		Dep_checkerNum=`sudo cat ./$ZICF  |grep "^ZINST requires pkg" | awk '{print NR}' |tail -1 `
		DepCounter=1
			while [[ $DepCounter -le $Dep_checkerNum ]]
			do
				Dep_checker=`sudo cat ./$ZICF  |grep "^ZINST requires pkg" | awk 'NR=='$DepCounter'{print $4}'`
				Dep_list_check=`zinst ls |awk -F '-   ' '{print $2}' | awk -F '-' '{print $1}' | egrep "^$Dep_checker$"`
					if [[ $Dep_checker != "" ]]
					then    

						if [[ $Dep_list_check = "" ]]
						then
							echo ""
							echo " ===== You need to install the \"$Dep_checker\" package first before the $Packagename install ===="
							sudo rm -Rf $ZinstBaseRoot/vault/Source/$ZinstName $ZinstDIRs/$ZinstOrgName
							exit 0;
						fi
					fi
				### Dependency comment check
				echo "# Dependency package: $Dep_checker"  >> .file.list
				let DepCounter=DepCounter+1
			done;
		#### [File parser] #####
		### File set
		## Directory make for the File copy
		CPP=( `sudo cat $ZICF |grep ^FILE | awk '{print "'$ZinstBaseRoot'/"$5}'` )
			if [[ $CPP != ""  ]]; 
			then
				## Copy Array Duplicate filter
				RCPP=(`printf "%s\n" "${CPP[@]%/*}" | sort -u`)

				echo "sudo mkdir -p ${RCPP[*]}" >> .file.list
				echo "sudo chgrp $Group ${RCPP[*]}" >> .file.list
				echo "sudo chown $Owner ${RCPP[*]}" >> .file.list
			fi

		## Parsing for Quotation mark encode
		sed -i 's/"/%Q%/g' $ZICF 

		## Insert for uninstall command
		if [ -f $ZinstBaseRoot/vault/Source/$ZinstName/uninstall.sh ] ; then
			sudo chmod 775 $ZinstBaseRoot/vault/Source/$ZinstName/uninstall.sh
			sudo chown $Owner $ZinstBaseRoot/vault/Source/$ZinstName/uninstall.sh
			sudo chgrp $Group $ZinstBaseRoot/vault/Source/$ZinstName/uninstall.sh
			sudo sh -c 'echo "echo \"*** Uninstall option has been activated ***\""' >> .file.list
		fi
		## File copy
		#echo "File copy" >> .file.list
		sudo cat $ZICF |grep ^FILE | awk '{print "cp ",$6,"'$ZinstBaseRoot'/"$5,";echo \"'$ZinstBaseRoot'/"$5"\""}' >> .file.list
		echo " echo \" --- File Initializing .....\"" >> .file.list

		## File Permission
		sudo cat $ZICF |grep ^FILE | awk '{print "chmod",$2,"'$ZinstBaseRoot'/"$5}' >> .file.list

		echo " echo \" --- Permission Initializing .....\"" >> .file.list
		## File Owner 
		#sudo cat $ZICF |grep ^FILE | awk '{print "chown",'\"$Owner\"',"'$ZinstBaseRoot'/"$5}' >> .file.list
		sudo cat $ZICF |grep ^FILE | awk '{print "chown",$3,"'$ZinstBaseRoot'/"$5}' >> .file.list

		echo " echo \" --- Setting the Group  .....\"" >> .file.list
		## File Group 
		sudo cat $ZICF |grep ^FILE | awk '{print "chgrp",$4,"'$ZinstBaseRoot'/"$5}' >> .file.list

		#### [Symbolic parser] #####
		### Symbolic link set
		## Directory makes for the simbolic
		LNP=( `sudo cat $ZICF |grep ^SYMB | awk '{print "'$ZinstBaseRoot'/"$5}'` )
			if [[ $LNP != ""  ]]; 
			then
				## Copy Array Duplicate filter
				RLNP=(`printf "%s\n" "${LNP[@]%/*}" | sort -u`)
				echo "sudo mkdir -p ${RLNP[*]}" >> .file.list
				echo "sudo chgrp $Group ${RLNP[*]}" >> .file.list
				echo "sudo chown $Owner ${RLNP[*]}" >> .file.list
			fi
		## make a Symbolic
		#echo "Make a symbole" >> .file.list
		sudo cat $ZICF |grep ^SYMB | awk '{print "sudo ln -fs '$ZinstBaseRoot'/"$6, "'$ZinstBaseRoot'/"$5}' >> .file.list

		#### [Configuration file parser] #####
		### Config file set
		## Directory makes for the Config
		CPC=( `sudo cat $ZICF |grep ^CONF | awk '{print "'$ZinstBaseRoot'/"$5}'` )
			if [[ $CPC != ""   ]];
			then	
				## Copy Array Duplicate filter
				RCPC=(`printf "%s\n" "${CPC[@]%/*}" | sort -u`)
				echo "sudo mkdir -p ${RCPC[*]}" >> .file.list
				echo "sudo chgrp $Group ${RCPC[*]}" >> .file.list
				echo "sudo chown $Owner ${RCPC[*]}" >> .file.list
				echo "sudo touch  ${RCPC[*]}""/_zinst" >> .file.list
			fi
		#echo "Config file set" >> .file.list
		sudo cat $ZICF |grep ^CONF | awk '{print "cp",$6,"'$ZinstBaseRoot'/"$5}' >> .file.list

		## Config Permission
		sudo cat $ZICF |grep ^CONF | awk '{print "chmod",$2,"'$ZinstBaseRoot'/"$5}' >> .file.list

		## Config Owner 
		sudo cat $ZICF |grep ^CONF | awk '{print "chown",$3,"'$ZinstBaseRoot'/"$5}' >> .file.list

		## Config Group 
		sudo cat $ZICF |grep ^CONF | awk '{print "chgrp",$4,"'$ZinstBaseRoot'/"$5}' >> .file.list

		#### [Change parse detail]
		## change Permission
		sudo sed -i 's/chmod - /chmod '$Perm' /g' ./.file.list
		## change Owner
		sudo sed -i 's/chown - /chown '$Owner' /g' ./.file.list
		## change Group
		sudo sed -i 's/chgrp - /chgrp '$Group' /g' ./.file.list
		## change direction
		sudo sed -i 's/\.\./\./g' ./.file.list

		### Config file set
		#### [Zinst Set parser]
		#sudo cat $ZICF |grep '^ZINST set' |grep set | awk '{print "zinst set","'$Packagename'."$3"="$4}' >> .file.list
		sudo cat $ZICF |grep '^ZINST set' | awk '{print "sed -i '/$Packagename.'"$3"'/'d '$ZinstBaseRoot/vault/zinst/zinst_set.list'"}' >> .file.list
		sudo cat $ZICF |grep '^ZINST set' | awk '{print "echo \"'"$Packagename."'"$3"="$4"\" >> '$ZinstBaseRoot'/vault/zinst/zinst_set.list"}' >> .file.list

		### Quotation mark Exception
		sed -i 's/%Q%/\\\"/g' .file.list
		sed -i 's/\\\\\"/\\\"/g' .file.list

		#### [Command line parser] #####
		## Command line excute
		sudo cat $ZICF |grep ^COMM | awk '{print $0}' | sed -e 's/COMM //g' >> .file.list
		sed -i 's/%Q%/\"/g' .file.list

		### Package Dependency check
		#### [Zinst Dep parser]
		Dep_checkerNum=`sudo cat ./$ZICF  |grep "^ZINST requires" | awk '{print NR}' |tail -1 `
		DepCounter=1
			while [[ $DepCounter -le $Dep_checkerNum ]]
			do
			ZinstDeps=`sudo cat $ZICF |grep '^ZINST requires' | awk 'NR=='$DepCounter`
				if [[ $ZinstDeps != "" ]];
				then
					ZinstDepChk=`sudo cat $ZICF |grep '^ZINST requires' | awk '{print $4" - package has a dependency with ( '$Packagename' )"}'`
					ZinstCurrentDeps=`sudo cat $ZinstBaseRoot/vault/zinst/.dependency.list |grep "$ZinstDepChk"`
						if [[ $ZinstCurrentDeps = ""  ]];
						then
							echo "$ZinstDepChk"  >> $ZinstBaseRoot/vault/zinst/.dependency.list
						fi
				fi
			let DepCounter=DepCounter+1
			done;	

		#### [Cron parser] #####
		### Condtab set
			if [[ $Crontab = "CRON" ]];
			then
				Counter=1
					while [ $Counter -le $CrontabRow ]
					do
						sudo sh -c "echo \"##$Packagename-$Version Cron Scheduler\"  > $Packagename.cron"
						#sudo sh -c "cat $ZICF |grep \"^CRON\" | awk 'NR==$Counter {print $5,$6,$7,$8,$9,\"$ZinstBaseRoot/\"$10,\" #$Packagename\"}' >> $Packagename.cron"
						CrontFetch=`sudo cat $ZICF |grep "^CRON" | awk 'NR=='$Counter' {print $5,$6,$7,$8,$9,"'$ZinstBaseRoot'/"$10," #'$Packagename'"}'`
						sudo sh -c "echo \"$CrontFetch\" >> $Packagename.cron"
						CronUser=`sudo cat $ZICF |grep ^CRON |  awk 'NR=='$Counter'{print $3}'`
							if [[ $CronUser = "-" ]];
							then 
								CronUser=$Owner
							fi
						TargetCron=/var/spool/cron/$CronUser
						echo "#### $TargetCron"  >> .file.list
						Result=`sudo cat $TargetCron  2> /dev/null |grep $Packagename`
							if [[ $Counter = "1" ]];
							then
								if [[ $Result != "" ]];
								then
									echo "---==== Crontab has a configuration about this already ====---";
									sudo sed -i "/$Packagename/d" $TargetCron;
									echo "---==== Crontab has been changed as a new configration ====---"
									sudo sh -c "cat $Packagename.cron >> $TargetCron"
								else
									sudo sh -c "cat $Packagename.cron >> $TargetCron"
									echo "---==== Crontab has been changed as a new configration ====---"
								fi
							else
								sudo sh -c "cat $Packagename.cron >> $TargetCron"
							fi
					let Counter=Counter+1
					done;
			#rm $Packagename.cron
			fi
		## Parsing for Quotation mark decode
		sed -i 's/%Q%/"/g' $ZICF 

		## Excute command list and file & package file remove
		sudo sed -i 's/\t//g' ./.file.list
		sudo sed -i 's/^ cp/cp/g' ./.file.list
		sudo sh ./.file.list
		echo "$Packagename-$Version package has been installed"
		sudo rm -f $ZinstSourceDir/$Package_list 1> /dev/null

## Out of 3 steps older package clean - Todo

		## Package listup
		ZP=`echo "$ZinstBaseRoot" | sed -e "s/\///g"` 
		ls -l $ZinstDIRs/ | awk '{print $6,$7,$8,"-", $11}' > $ZinstBaseRoot/vault/zinst/.pkglist
		sudo sed -i 's/\//%/g'  $ZinstBaseRoot/vault/zinst/.pkglist
		sudo sed -i '/   -/d'  $ZinstBaseRoot/vault/zinst/.pkglist
		sudo sed -i "s/%$ZP%vault%Source%/ /g"  $ZinstBaseRoot/vault/zinst/.pkglist

		Command_p="+ Install"
		echo -e "`date +%Y.%m.%d_%T`\t $WhoStamps : $Command_p - $ZinstName $PureOption" >> $History_LOG 
		let "Host_index=$Host_index + 1";

		############################## Install end without target host ##################################################	
		let CounterAll=$CounterAll+1
	done

	############################## Setting config  #################################
	if [[ $Zset != "" ]]
	then
		SetOptionValue="$Zset"
		Pkg_Set	$*
	fi

	if [[ $Package_list != "" ]]; then
		Save_Restore_file $*
	fi
}

Pkg_Set() {

### Base information
CheckSetArry=($Zset)
CheckSetNum=${#CheckSetArry[@]}
	SetValue=${CheckSetArry[1]}
	if [[ $SetValue = "" ]];
	then
		sudo cat $ZinstBaseRoot/vault/zinst/zinst_set.list
	else
		CSetCount=0;
			for (( i=0; i<=$CheckSetNum; i++ ))
			do
				CheckSet=`echo "${CheckSetArry[$i]}"`

					if [[ $CheckSet = "set" ]] || [[ $CheckSet = "-set" ]]
					then
						let CSetCount=$CSetCount+1
					fi
			done
		let CSetCount=$CSetCount+2
			CountSet=2
			while [[ $CountSet -lt $CSetCount  ]]
			do
				SetOptionValueE=`echo "${CheckSetArry[@]}" | awk -F '-set ' '{print $'$CountSet'}' |sed -e 's# ##'  2> /dev/null`
				SetTarget=`echo "$SetOptionValueE" | awk -F "=" '{print $1}'`	
				ZinstSet=`echo "$SetOptionValueE" | sed -e "s#$SetTarget=##g" 2> /dev/null`
				OptSwt=`echo $SetTarget | awk -F '.' '{print $1}'`
				Option=`echo $SetTarget | sed -e "s#$OptSwt.##g"`
				PackageS=`echo $SetTarget | awk -F '.' '{print $1}'`
				SetZICF="$PackageS.zicf"
				## Check a set list in zinst
				CurrentSet=( `sudo cat $ZinstBaseRoot/vault/zinst/zinst_set.list | grep "^$SetTarget"` )
				CurrentSetCheck=`echo "$CurrentSet" | awk -F "=" '{print $1}'`
				CurrentSetCheck2=`echo "$CurrentSet" | sed -e "s#$CurrentSetCheck=##g"  2> /dev/null`
					Setchecker=`ls $ZinstDIRs 2> /dev/null |grep "$PackageS"`
					if [[ $Setchecker != ""  ]]; then
						ConfCounter=0
						Grep_ZICF_Raw=(`sudo cat $ZinstDIRs/$PackageS/$SetZICF |grep "^CONF" | awk '{print "'$ZinstDIRs/$PackageS'/"$6}' | sed -e 's#\.\/##g'`)
							while [[ $ConfCounter -lt ${#Grep_ZICF_Raw[@]} ]]; do
									if [[ $Option = "" ]]; then 
										echo " Please make sure the target option "
										echo " ex) zinst set vipctl.onboot=yes "
										exit 0;
									fi
								## Find a current set 
								Grep_ZICF=`sudo cat $ZinstDIRs/$PackageS/$SetZICF |grep "^CONF" | awk '{print "'$ZinstBaseRoot'/"$5}'`
									if [[ $Grep_ZICF = "" ]]; then 
										echo "$Barr"
										echo "$PackageS has not a config file as a zicf or we couldn't find any config"
										echo "Please check this zicf file of the package."
										echo ""
										echo "ex) zinst list -zicf $PackageS | grep ^CONF <--- Result is empty."
										echo " If so, you should change the file type from FILE to CONF "
										echo "$Barr"
										exit 0;
									fi
								Conf_Dir="${Grep_ZICF_Raw[$ConfCounter]%/*}"
								Grep_Option=`sudo grep "^$Option=" $Conf_Dir/*`
									if [[ $Grep_Option = "" ]];then
										Grep_Option=`sudo grep "^$Option = " $Conf_Dir/*`
											if [[ $Grep_Option = "" ]]; then 
												Grep_Option=`sudo grep "^$Option " $Conf_Dir/*`
											fi
									fi
								## Parsing
								Conf_File=${Grep_ZICF_Raw[$ConfCounter]%:*}
									if [[ $CommandX = set ]]; then
										Command_p=" * setup "
									else
										Command_p=" & setup "
                        						fi

								Conf_Result_File=`echo "$Conf_File" | awk -F '/' '{print $NF}'`
								Grep_ZICF_Source=`sudo cat $ZinstDIRs/$PackageS/$SetZICF |grep "^CONF" |grep "$Conf_Result_File$" | awk '{print "'$ZinstBaseRoot'/"$5}'`
								### Current Setting check and replace
									if [[ $SetTarget = $CurrentSetCheck ]];
									then
										Equiltype1=`sudo grep "$Option=$CurrentSetCheck2" $Grep_ZICF_Source`
										Equiltype2=`sudo grep "$Option = $CurrentSetCheck2" $Grep_ZICF_Source`
										Equiltype3=`sudo grep "$Option $CurrentSetCheck2" $Grep_ZICF_Source`
											if [[ $Equiltype1 != "" ]];
											then 
												sudo sed -i "s#$Option=$CurrentSetCheck2#$Option=$ZinstSet#g" $Grep_ZICF_Source
											elif [[ $Equiltype2 != "" ]]; then
												sudo sed -i "s#$Option = $CurrentSetCheck2#$Option = $ZinstSet#g" $Grep_ZICF_Source
											elif [[ $Equiltype3 != "" ]]; then
												sudo sed -i "s#$Option $CurrentSetCheck2#$Option $ZinstSet#g" $Grep_ZICF_Source
											fi		
										### Stamping a Set value for history
										Grep_Option=`sudo grep "^$Option=" $Grep_ZICF_Source`
											if [[ $Grep_Option = "" ]]
											then
												Grep_Option=`sudo grep "^$Option = " $Grep_ZICF_Source`
													if [[ $Grep_Option = "" ]]
													then 
														Grep_Option=`sudo grep "^$Option " $Grep_ZICF_Source`
													fi
											fi
										realSetOption=`echo "$Grep_Option"  | sed -e "s#$Option #$Option=#g" -e 's#== #=#g'`
											if [[ $realSetOption != "" ]]; then
												sudo sed -i "/$SetTarget=/d" $ZinstBaseRoot/vault/zinst/zinst_set.list
												echo "$PackageS.$realSetOption" >> $ZinstBaseRoot/vault/zinst/zinst_set.list
											fi
									fi
								let ConfCounter=$ConfCounter+1
							done

							sudo cat  $ZinstBaseRoot/vault/zinst/zinst_set.list |grep "^$SetTarget="
							echo -e "`date +%Y.%m.%d_%T`\t $WhoStamps : $Command_p - $SetOptionValueE  " >> $History_LOG

								if [[ $SetTarget != $CurrentSetCheck ]]; then
									### Cancel Setup when it meet th Empty result
										if [[ $Grep_Option = "" ]]
										then
											echo " It dose not existed target option"
											echo " ex) zinst set vipctl.onboot=yes "
											exit 0;
										fi
									## Remove temporary 2015.03.06
									# echo "$SetOptionValueE" >> $ZinstBaseRoot/vault/zinst/zinst_set.list
									echo -e "`date +%Y.%m.%d_%T`\t $WhoStamps : $Command_p - $SetOptionValueE  " >> $History_LOG
								fi
					else
						echo " --- Package name has not found. Please insert a package name & option exactly ---"
					fi
				let CountSet=$CountSet+1
			done
						Save_Restore_file $*
	fi

}

Pkg_Remove(){
ProcessPkg=($ZPackages)
	if [[ $ZPackages = "" ]]
	then
		echo "=============== Please insert a package name as you need to see ============"
	else
		Counter=0
			while [[ $Counter -lt $ProcessPkgNum ]]
			do
				Pkg_list=${ProcessPkg[$Counter]}
				ZinstOrgName=`echo $Pkg_list| awk -F "-" '{print $1}'`
				Package_RC=`ls $ZinstDIRs |egrep "^$ZinstOrgName$"`
					if [[ $ZinstOrgName != $Package_RC ]]
					then
						echo "  "
						echo "  $ZPackages Package has not found."
						echo "  "
						exit;
					fi
				RmResult=`sudo cat $ZinstDIRs/$ZinstOrgName/.file.list |grep ^echo | awk '{print $2}'`
					if  [[ $RmResult != "" ]]; 
					then
						cd $ZinstDIRs/$ZinstOrgName
						RmTargetCron=`sudo cat .file.list  | grep \#### | awk '{print $2}'`
						RmPkg_list=`sudo cat .file.list |grep " package install " |awk '{print $3}'`

							if [[ $ZOptions != "-force" ]]
							then
							RmDepChecker=`sudo cat $ZinstBaseRoot/vault/zinst/.dependency.list | grep "^$ZinstOrgName " |awk '{print $9}' `
								if [[ $RmDepChecker != "" ]]
								then
									echo "===== You have to remove as below package(s) ===== "
									echo "$RmDepChecker"
									echo "================================================== "
									echo "= $ZinstOrgName has a dependency with that. = "
									exit 0;
								fi
							fi
						sudo sed -i '/'$ZinstOrgName'/d' $ZinstBaseRoot/vault/zinst/.dependency.list
							if [ -f $ZinstDIRs/$ZinstOrgName/uninstall.sh ]; then
								sudo sh $ZinstDIRs/$ZinstOrgName/uninstall.sh
							fi
						`sudo cat $ZinstDIRs/$ZinstOrgName/.file.list  | grep "^cp" | awk '{print "sudo rm -Rfv",$3}' > ~/removelist`
						RmMv=`sudo cat $ZinstDIRs/$ZinstOrgName/.file.list |grep "^mv"  | awk '{print $2}' | awk -F '/' '{print $NF}'`
						`sudo cat $ZinstDIRs/$ZinstOrgName/.file.list  | grep "^mv" | awk '{print "sudo rm -Rfv",$3"$RmMv"}' >> ~/removelist`
						`sudo cat $ZinstDIRs/$ZinstOrgName/.file.list  | grep "^ln" | awk '{print "sudo rm -Rfv",$4}' >> ~/removelist`
						sudo sh ~/removelist; sudo rm ~/removelist
						RmDir=`sudo cat $ZinstDIRs/$ZinstOrgName/.file.list  | grep "^mkdir" |awk '{print "ls", $3}'`
							if [[ $RmDir = "" ]];
							then
								`sudo cat $ZinstDIRs/$ZinstOrgName/.file.list  | grep "^mkdir" |awk '{print "rmdir", $3}'`
							fi
						RmZinstName=`ls $ZinstBaseRoot/vault/Source/ |grep $Pkg_list`
						sudo rm -Rfv $ZinstDIRs/$ZinstOrgName
						sudo rm -Rfv $ZinstBaseRoot/vault/Source/$RmPkg_list
 						echo "########## $RmPkg_list package has been removed ######## "
						sudo sed -i "/$ZinstOrgName/d" $ZinstBaseRoot/vault/zinst/zinst_set.list
							if [[ $RmTargetCron != "" ]]
							then
								sudo sed -i "/$ZinstOrgName/d" $RmTargetCron
							fi
					else
						echo "============= $ZPackages package has not installed =================="
					fi
				### Remove action stamps to Dist
				sudo curl -e --url $Dist_server/remove:$RmPkg_list.zinst > /dev/null  2>&1

				Command_p="- Remove "
				echo -e "`date +%Y.%m.%d_%T`\t $WhoStamps : $Command_p - $RmPkg_list  " >> $History_LOG
				let Counter=Counter+1
			done
	fi
cd $ZinstDIRs
Save_Restore_file $*
}

Pkg_List(){
### Check file of the phrase
Pkg_file_checker=`echo $ZPackages |grep "/"`
CurrentCheck=`echo $ZPackages |grep "^./"`
	if [[ $ZOptions = "-files" ]]
	then
			if [[ $ZPackages = "" ]]
			then
				echo "=============== Please insert a package name as you need to see ============"
			else
				if [[ $Pkg_file_checker != ""  ]]
				then
						if [[ $CurrentCheck != "" ]]
						then
							PWD=`pwd | sed 's/\//%%%/g'`
							Pkg_file_checker=`echo $Pkg_file_checker | sed -e 's/\.\//%%%/g'`
							Pkg_file_checker=`echo $Pkg_file_checker | sed -e "s/%%%/$PWD\//g"`
							Pkg_file_checker=`echo $Pkg_file_checker | sed -e 's/%%%/\//g'`
						fi
					cd $ZinstDIRs/
					File_list=`ls`
					File_list_Num=`echo $File_list |awk '{print NF}'`
					CounterFM=1
    
					#####  loop start for the package find each directories
						while [[ $CounterFM -le $File_list_Num ]]
						do
							Package_dir=`echo $File_list | awk '{print $'$CounterFM'}'`

							cd $ZinstDIRs/$Package_dir
							Package_finder=`sudo grep "^cp" .file.list | awk '{print $3}' | egrep "$Pkg_file_checker$" 2> /dev/null`
							if [[ $Package_finder != "" ]]
							then
								cd $ZinstDIRs/
								Result_file=`ls -ali | grep $Package_dir- | awk -F '/' '{print $NF}'`
								echo "$Result_file  <-------   $Pkg_file_checker"
							fi

							cd $ZinstDIRs/$Package_dir
							Symb_finder=`sudo egrep "$Pkg_file_checker$" .file.list | grep "^ln" |awk '{print $4}' 2> /dev/null`
							if [[ $Symb_finder != "" ]]
							then
								cd $ZinstDIRs/
								Result_file=`ls -ali | grep $Package_dir- | awk -F '/' '{print $NF}'`
								echo "$Result_file  <-------   $Pkg_file_checker"
							fi
        
							cd $ZinstDIRs/
							let CounterFM=CounterFM+1
						done
        
						if [[ $Result_file = "" ]]
						then
							echo " ---- Could not find any package ---- "
						fi	
					exit 0;
				fi
		ZinstOrgName=`echo $ZPackages| awk -F "-" '{print $1}'`
		cd $ZinstDIRs/$ZinstOrgName 2> /dev/null
		sudo cat $ZinstDIRs/$ZinstOrgName/.file.list 2> /dev/null | grep "^cp" | awk '{print $3}'
		sudo cat $ZinstDIRs/$ZinstOrgName/.file.list 2> /dev/null | grep "^ln" | awk '{print $5,"<- " $4}'
	fi
	elif [[ $ZOptions = "-zicf" ]]
	then
			if [[ $ZPackages = "" ]]
			then
				echo "=============== Please insert a package name as you need to see ============"
			else
				ZinstOrgName=`echo ${PackageArry[0]}| awk -F "-" '{print $1}'`
				CheckPkgls=`zinst ls |grep " $ZinstOrgName-"`
					if [[ $CheckPkgls = "" ]]; then
						echo "====== Not existed the package name.  Please make sure that package name ======"
						exit 0;
					fi
				cd $ZinstDIRs/$ZinstOrgName
				sudo cat $ZinstDIRs/$ZinstOrgName/$ZinstOrgName.zicf
			fi
	elif [[ $ZOptions = "-dep" ]]
	then
			if [[ $ZPackages = "" ]]
			then
				echo "=============== Please insert a package name as you need to see ============"
			else
				ZinstOrgName=`echo ${PackageArry[0]}| awk -F "-" '{print $1}'`
				cd $ZinstDIRs/$ZinstOrgName
				sudo cat $ZinstBaseRoot/vault/zinst/.dependency.list |grep "^$ZinstOrgName "
			fi
	else
		ZP=`echo "$ZinstBaseRoot" | sed -e "s/\///g"` 
		sudo mkdir -p $ZinstBaseRoot/vault/zinst/
		sudo chgrp $zinst_group $ZinstBaseRoot/vault/zinst/
		export TIME_STYLE="+%Y-%m-%d %H:%M:%S %z" 
		ls -l $ZinstDIRs/ 2> /dev/null | awk '{print $6,$7," - ", $11}' > $ZinstBaseRoot/vault/zinst/.pkglist 
		sudo chgrp $zinst_group $ZinstBaseRoot/vault/zinst/.pkglist
		sudo chmod 664 $ZinstBaseRoot/vault/zinst/.pkglist
		sudo sed -i 's/\//%/g'  $ZinstBaseRoot/vault/zinst/.pkglist
		sudo sed -i '/   -/d'  $ZinstBaseRoot/vault/zinst/.pkglist
		sudo sed -i "s/%$ZP%vault%Source%/ /g"  $ZinstBaseRoot/vault/zinst/.pkglist
		PkgListZ=`sudo cat $ZinstBaseRoot/vault/zinst/.pkglist 2> /dev/null`
			if [[ $PkgListZ = "" ]]
			then
				echo "=============== Package dose Not-existed here ============"
			fi
		echo "$PkgListZ"
	fi
}

Pkg_Find(){

	if [[ $ZOptions = "-local" ]]
	then
		    if [[ $ZPackages = "" ]]
		    then
				ls $ZinstSourceDir | grep .zinst
		    else
			   ls $ZinstSourceDir | grep $ZPackages  | grep .zinst 
		    fi
	else
			if [[ $ZPackages = "" ]];
			then
				sudo curl -e --url $Dist_server/ 2> /dev/null |grep zinst | sed 's/^.*<a href="//g' |awk -F '\"' '{print $1}' | egrep -v ^zinst$
			else
				sudo curl -e --url $Dist_server/ 2> /dev/null |grep zinst | sed 's/^.*<a href="//g' |awk -F '\"' '{print $1}' | egrep -v ^zinst$ | grep $ZPackages 
			fi
	
	fi

}

Cront_Command(){

Command_p="+ Crontab - Edit"
	case "$2" in
	-l)
		crontab -l ;;
	-e)
		crontab -e 
		echo -e "`date +%Y.%m.%d_%T`\t $WhoStamps : $Command_p" >> $History_LOG ;;
	-u)
	case "$4" in
		-l)
			sudo crontab -u $ZPackages -l ;;
		-e)
			sudo crontab -u $ZPackages
			echo -e "`date +%Y.%m.%d_%T`\t $WhoStamps : $Command_p -u $ZPackages " >> $History_LOG ;;
		*)
			echo " - Please insert an option as you need to change correctly - "
			echo " ex) 'zinst crontab -e' to edit crontab"
			echo " ex) 'zinst crontab -u root -l' to listing the crontab of the root user"
		;;
	esac
	;;
	*)
		echo " - Please insert an option as you need to change correctly - "
		echo " ex) 'zinst crontab -e' to edit crontab"
		echo " ex) 'zinst crontab -u root -l' to listing the crontab of the root user"
	;;
	esac
}

Pkg_Restore(){
Types=$ZOptions
Restore_File=$ZPackages
	if [[ $Types != ""  ]]
	then
			if [[ $Restore_File = "" ]]
			then
				echo $Barr
				echo " --- Parse error: Please insert an information exactly. ---"
				echo " --- zinst restore -file [Save filename]               ---"
				echo " --- or zinst restore -igor                            ---"
				echo $Barr
				exit 0;	
			fi
	else
		echo $Barr
		echo " --- Parse error: Please insert a Type ---"
		echo " --- zinst restore -file or -igor      ---"
		echo $Barr
		exit 0; 
	fi

	if [[ ! -f  $Restore_File ]]
	then
		echo $Barr
		echo " --- Could not find save file as you typed.            ---"
		echo " --- Plese insert a file name exactly.                 ---"
		echo $Barr
		exit 0;
	fi

	if [[ $Types = "-file" ]]
	then
		sudo cat $ZPackages |egrep "^Package" | sed 's/Package/zinst/g' |  sed 's/setting/set/g'
		echo " "
		echo " Do you want to restore as these list ? [ y / n ]"
		read SureRestore
			### Restore Remove
			if [[ $SureRestore = "y" ]]
			then
				RemoveForRestore=( `zinst ls | awk '{print $4}'` )
					`echo zinst remove ${RemoveForRestore[@]} -force`
				ServerDefaultFirst=`cat $ZPackages |grep "install server_default_setting" | awk '{print $3}'`
				zinst install $ServerDefaultFirst
				`echo "zinst install \`cat $ZPackages |egrep "^Package" | sed 's/Package install //g' |  sed 's/Package setting/ -set/g' | sed -e "s/$ServerDefaultFirst//g" \` -stable"`
			fi

	elif [[ $Types = "-igor" ]]
	then
		echo $Barr
		echo " Igor system will be launched" 
		echo $Barr
	else
		echo $Barr
		echo " --- Parse error: Please insert a Type ---"
		echo " --- zinst restore -file or -igor      ---"
		echo $Barr
		exit 0; 
	fi
Command_p="= Restore"
echo -e "`date +%Y.%m.%d_%T`\t $WhoStamps : $Command_p - $ZPackages" >> $History_LOG 
}

Pkg_Rollback(){
## Define root DIR of zinst
BaseRoot=$ZinstBaseRoot 
Types=$ZOptions
Rollback_File=$ZPackages
	## Check Types
	if [[ $Types != ""  ]]
	then
		GrepFileTypes=`echo $Types | grep "\-file"`
			if [[ $GrepFileTypes != "" ]]; then
					if [[ $Rollback_File = "" ]]
					then
						echo $Barr
						echo " --- Parse error: Please insert an information exactly. ---"
						echo " --- zinst rollback -file [Save filename]               ---"
						echo $Barr
						exit 0;	
					fi
			fi

		GrepSaraTypes=`echo $Types | grep "\-sara"`
			if [[ $GrepSaraTypes != "" ]]; then
				Rollback_File="temp_list.save"
				ZPackages="$Rollback_File"
				NIC=`ip addr |grep "brd" | grep "inet" | head -1 | awk '{print $NF}'`
				LocalHost="`/sbin/ifconfig $NIC |grep " addr:" |grep Bcast |head -1 | awk '{print $2}'|awk  -F ':' '{print $2}'`"
				rm -f $Rollback_File
				Sara_URL=`curl "http://$Sara_Host/zinst/?host=$LocalHost&user=$WhoStamp" > $Rollback_File`
					## Existed file check from Sara
					CheckSaveDown=`grep "Not Found" ./$Rollback_File`
					if [[ $CheckSaveDown != "" ]];then
						echo "Save file is not exist in Sara"
						exit 0;
					fi
			fi
	else
		echo $Barr
		echo " --- Parse error: Please insert a Type ---"
		echo $Barr
		exit 0; 

	fi
			if [[ ! -f  $Rollback_File ]];then
				cd ~/
				SentFileChk=`echo "$ZPackages" | awk -F"/" '{print $NF}'` 
				ZPackages="$SentFileChk"
					if [[ ! -f  $SentFileChk ]];then
						echo $Barr
						echo " --- Could not find save file as you typed.            ---"
						echo " --- Plese insert a file name exactly.                 ---"
						echo $Barr
						exit 0;
				fi

	fi
version_redefine ()
{ echo "$@" | awk -F'.' '{printf("%03d%03d%03d\n", $1,$2,$3); }'; }

## Define the file Dir & name
Origin_zsave=$ZPackages

## Make an as-is list
Target_zsave_file="current_system_all.list"
Target_zsave_full="/tmp/$Target_zsave_file"
Sorted_org_zsave="/tmp/sorted_orizin.list"
Sorted_tgt_zsave="/tmp/sorted_target.list"
tmp_results="/tmp/tmp_result.txt"
remove_zsave_list="/tmp/remove_zsave_list.list"
install_zsave_list="/tmp/install_zsave_list.list"

## Clean Old temp file
rm -f $Sorted_org_zsave $Sorted_tgt_zsave $tmp_results $remove_zsave_list $install_zsave_list $Target_zsave_full

## Rebuild as-is file
echo "# --- Last touched by $WhoStamps --- " > $Target_zsave_full
echo "# --- Last command \" zinst $PackageAll \" " >> $Target_zsave_full
echo "# Date: `date +%Y.%m.%d_%T` " >> $Target_zsave_full
echo "#"  >> $Target_zsave_full
echo "# zinst package installer all-configuration backup-list for the package restore" >> $Target_zsave_full
zinst ls | awk '{print "Package install",$4".zinst"}' >> $Target_zsave_full
echo "- - - " >> $Target_zsave_full
zinst set | awk 'NR>1{print "Package setting",$1}' >> $Target_zsave_full
Block="======================================================================================="
## Sort a list
sort $Origin_zsave | egrep -v "#" | sed -e '/^$/d' > $Sorted_org_zsave
sort $Target_zsave_full | egrep -v "#" | sed -e '/^$/d' > $Sorted_tgt_zsave

## Different check
diff $Sorted_org_zsave $Sorted_tgt_zsave|fgrep -v " #" | egrep  -v "^[0-9]" | sort |sed -e '/> -/d' -e '/< -/d'  > $tmp_results

## Show the list
cat $tmp_results | grep ">" | sed -e 's/ settting / setting /g' > $remove_zsave_list
cat $tmp_results | grep "<" | sed -e 's/ settting / setting /g' > $install_zsave_list

current_array=(`cat $remove_zsave_list | sed -e 's/> Package install //g' | sed -e '/setting/d'`)
changing_array=(`cat $install_zsave_list | sed -e 's/< Package install //g' | sed -e '/setting/d'`)
	## loop for version check
	xCount=0
	while [[ $xCount -lt ${#current_array[@]} ]]; do
		Raw_xPkgName=`echo "${current_array[$xCount]}" | awk -F'-' '{print $1}'`
		Raw_xVersion=`echo "${current_array[$xCount]}" | awk -F'-' '{print $2}' | sed -e 's/\.zinst//g'`
		ExistedVersionCheck=`echo "${changing_array[@]}" |grep $Raw_xPkgName`
			if [[ $ExistedVersionCheck != "" ]]; then
					yCounter=0
					while [[ $yCounter -lt ${#changing_array[@]} ]];do
						ExistedMatchCheck=`echo "${changing_array[$yCounter]}" |grep $Raw_xPkgName`
							if [[ $ExistedMatchCheck != "" ]]; then
								ChangingVersion=`echo "${changing_array[$yCounter]}" | awk -F'-' '{print $2}' | sed -e 's/\.zinst//g'`
									if [[ "$(version_redefine "$ChangingVersion")" < "$(version_redefine "$Raw_xVersion")" ]];then
										sed -i "/> Package install $Raw_xPkgName/d" $remove_zsave_list
										sed -i "s/< Package install $Raw_xPkgName/< Package downgrade $Raw_xPkgName/g" $install_zsave_list
									else
										sed -i "/> Package install $Raw_xPkgName/d" $remove_zsave_list
										sed -i "s/< Package install $Raw_xPkgName/< Package upgrade $Raw_xPkgName/g" $install_zsave_list
									fi
							fi
					let yCounter=$yCounter+1
					done
			fi
	let xCount=$xCount+1
	done

## Print Result list
sed -i "s/> Package install /> Package remove /g" $remove_zsave_list
echo "$Block"
echo "= Target list for remove                                                              ="
echo "$Block"
cat $remove_zsave_list
echo "$Block"
echo ""
echo "$Block"
echo "= Target list for install & setting                                                   ="
echo "$Block"
cat $install_zsave_list
echo "$Block"
echo ""

Final_remove_array=(`cat $remove_zsave_list | sed -e '/setting/d' | awk '{print $4}'`)
Final_install_array=(`cat $install_zsave_list | fgrep -v " downgrade" | sed -e 's/setting / tmp -set /g' | awk '{print $4,$5}'`)
Final_downgrade_array=(`cat $install_zsave_list | grep " downgrade" | awk '{print $4}'`)

BlankCheck1=`cat $install_zsave_list`
BlankCheck2=`cat $remove_zsave_list`
Command_p="= Rollback"

	if [[ $BlankCheck1 = "" ]] && [[ $BlankCheck2 = "" ]]; then
		echo " === Nothing to change... === "
		echo -e "`date +%Y.%m.%d_%T`\t $WhoStamps : $Command_p - Nothing to changed... by $ZPackages" >> $History_LOG
	else
		CheckForce=`echo "$ZOptions" |egrep " -force"`
		if [[ $CheckForce = "" ]];then
			echo " === Package & setting will be install & remove as upper list. Are sure ? === [y / n]"
			read confirm_sync
		else
			confirm_sync="y"
		fi

		if [[ $confirm_sync = y ]]; then
			echo -e "`date +%Y.%m.%d_%T`\t $WhoStamps : $Command_p --- START --- by $ZPackages" >> $History_LOG 
				if [[ ${Final_remove_array[@]} != "" ]];then
					zinst remove ${Final_remove_array[@]} -force
				fi

				if [[ ${Final_downgrade_array[@]} != "" ]];then
					zinst install ${Final_downgrade_array[@]} -downgrade
				fi

				if [[ ${Final_install_array[@]} != "" ]];then
					zinst install ${Final_install_array[@]} -stable
				fi
			echo -e "`date +%Y.%m.%d_%T`\t $WhoStamps : $Command_p ---  END  --- by $ZPackages" >> $History_LOG 
		fi
	fi
rm -f $Sorted_org_zsave $Sorted_tgt_zsave $tmp_results $remove_zsave_list $install_zsave_list $Target_zsave_full

}

Daemon_Control(){
ProcessPkg=($ZPackages)
ProcessPkgNum=${#ProcessPkg[@]}

Counter=0
Command_p="# Daemon $CommandX"
echo -e "`date +%Y.%m.%d_%T`\t $WhoStamps : $Command_p - ${ProcessPkg[@]}  " >> $History_LOG
ColorGreen="32"
ColorRed="31"
ColorDark="30"
	while [[ $Counter -lt $ProcessPkgNum ]]
	do
		DaemonC=`echo "${ProcessPkg[$Counter]}"`
		export LANG=C
		ServiceDaemonDir=`sudo cat /sbin/service | grep "SERVICEDIR=" | awk -F '=' '{print $2}' | sed -e 's/"//g'`
		sudo $ServiceDaemonDir/$DaemonC $CommandX &> $ZinstBaseRoot/vault/Source/Daemon_ctrl.log
		DaemLog=`sudo cat $ZinstBaseRoot/vault/Source/Daemon_ctrl.log |tail -1`
		Daemon_S=$DaemLog
			FailCheck=`echo $DaemLog | grep "FAILED"`
			if [[ $FailCheck != "" ]];then
				Daemon_S=`printf "[\033[%dm%s\033[0m]\n" $ColorRed "FAILED"`
			fi
			SuccCheck=`echo $DaemLog | grep "OK"`
			if [[ $SuccCheck != "" ]];then
				Daemon_S=`printf "[\033[%dm%s\033[0m]\n" $ColorGreen " OK "`
			fi
			NorCheck=`echo $DaemLog | grep -v "OK|FAILED"`
			if [[ $NorCheck != "" ]];then
				:
			fi
			DaemLog=$Daemon_S
		sudo cat $ZinstBaseRoot/vault/Source/Daemon_ctrl.log

		## Checking the daemon
		sleep 1
		DaemonPSChk=`ps aux |grep $DaemonC | egrep -v " grep" | egrep -v "zinst " |egrep -v " vi"`
			if [[ $DaemonPSChk != "" ]];then
				TextColor=$ColorGreen
				Daemon_Status="Working"
				## Daemon check result output
				DaemonResult=`printf "\033[%dm%s\033[0m\n" $TextColor "$Daemon_Status";`
				Command_Result=`echo "Daemon $DaemonResult: $DaemLog "`
			else
				TextColor=$ColorDark
				Daemon_Status="Not working"
				## Daemon check result output
				DaemonResult=`printf "\033[%dm%s\033[0m\n" $TextColor "$Daemon_Status";`
				Command_Result=`echo "Daemon $DaemonResult: $DaemLog"`
				#Command_Result=`echo "$DaemLog"`
			fi

		DaemonCheck=`echo $DaemLog | grep "unrecognized"`
			if [[ $DaemonCheck != "" ]]
			then
				echo "$DaemonC is unrecognized service"
				exit 0;
			fi
		echo -e "\t\t\t $WhoStamps : #     - $Command_Result " >> $History_LOG
		let Counter=Counter+1
        sudo rm -f $ZinstBaseRoot/vault/Source/Daemon_ctrl.log
	done
}

Zinst_Version(){
 echo "Zinst version" `sudo cat /usr/bin/zinst |grep ^VERSION | sed -e 's/VERSION=//g'`
}

Zinst_SelfConfig(){
SelfConfArry=(`echo "$PackageAll"`)
	## Mapping a HostsFile to tmp for excahnge the configuration
	sudo cat $HostsFile > /tmp/hosts_c.tmp
	if [[ ${SelfConfArry[1]} != "" ]];then
		SelfConfCount=0
		## Insert an information from command line for the IP & Host changes of the distribution server
		while [[ $SelfConfCount -le ${#SelfConfArry[@]}  ]];do
			check_new_ip=`echo ${SelfConfArry[$SelfConfCount]} | grep "ip=" |sed -e "s/ip=//g"`
				if [[ $check_new_ip != "" ]];then
					SelfConf_IP=${SelfConfArry[$SelfConfCount]}
					TargetSelfIP=`grep "^ManagerIP=" /usr/bin/zinst`
					sudo sed -i "s/$TargetSelfIP/ManagerIP=\"$check_new_ip\"/g" /usr/bin/zinst
					sudo sed -i "/$check_new_ip/d" /tmp/hosts_c.tmp
					sudo sh -c "echo $check_new_ip $FetchedDistServer >> /tmp/hosts_c.tmp"
					sudo sh -c "cat /tmp/hosts_c.tmp > $HostsFile"
					echo ""
					echo " --- Zinst distribution server IP address has been changed to \"$check_new_ip\" ---"
				fi
			check_new_host=`echo ${SelfConfArry[$SelfConfCount]} | grep "host=" |sed -e "s/host=//g"`
				if [[ $check_new_host != "" ]];then
					SelfConf_Host=${SelfConfArry[$SelfConfCount]}
					TargetSelfHost=`grep "^Dist_server=" /usr/bin/zinst`
					sudo sed -i "s#$TargetSelfHost#Dist_server=\"http://$check_new_host\"#g" /usr/bin/zinst
					sudo sed -i "/$FetchedDistServer/d" /tmp/hosts_c.tmp
					sudo sh -c "echo $ManagerIP $check_new_host >> /tmp/hosts_c.tmp"
					sudo sh -c "cat /tmp/hosts_c.tmp > $HostsFile"
					echo ""
					echo " --- Zinst distribution server domain  has been changed to \"$check_new_host\" ---"
				fi
			check_new_dir=`echo ${SelfConfArry[$SelfConfCount]} | grep "dir=" |sed -e "s#dir=##g"`
				if [[ $check_new_dir != "" ]];then
					SelfConf_DIR=${SelfConfArry[$SelfConfCount]}
					TargetSelfDir=`grep "^ZinstBaseRoot" /usr/bin/zinst`
					sudo sed -i "s#$TargetSelfDir#ZinstBaseRoot@%@%@\"$check_new_dir\"#g" /usr/bin/zinst
					sudo sed -i "s/@%@%@/=/g" /usr/bin/zinst
					echo ""
					echo " --- Zinst distribution server IP address has been changed to \"$check_new_dir\" ---"
				fi
		let SelfConfCount=$SelfConfCount+1
		done
		Print_Hi=( `echo ${SelfConfArry[@]} | awk '{for (i=2;i<NF+1;i=i+1) print $i","}'`)
		PrintHist=`echo "${Print_Hi[@]}" |sed -e 's/,$//g'`
		echo -e "`date +%Y.%m.%d_%T`\t $WhoStamps :  ! Zinst config has been changed > ${PrintHist[@]} " >> $History_LOG
	else
		echo " ================================================================"
		echo " You can change the configuration on zinst for IP,Host & RootDIR." 
		echo " Please insert a value for the zinst self setting as below"
		echo " zinst self-conf ip=10.1.1.1"
		echo " zinst self-conf ip=10.1.1.1 host=package.dist.com"
		echo " zinst self-conf dir=/data"
		echo " ================================================================"
		exit 0;
	fi
#Apply the configuration for HostsFile
#hosts_redefine 
zinst -v 1> /dev/null

}

Zinst_Selfupdate(){
cd ~/;
sudo curl -e --url $Dist_server > /tmp/dist_check.tmp 2>&1
check_dist_url=`grep "couldn't connect" /tmp/dist_check.tmp`
	if [[ $check_dist_url != "" ]];then
		echo " ================================================================"
		echo "  We couldn't connected with Zinst distribution server."
		echo "  Please check the Dist server"
		echo " ================================================================"
		sud orm -f /tmp/dist_check.tmp
		exit 0;
	fi

sudo rm -f zinst
wget  $Dist_server/zinst;
mv zinst zinst_tmp
	if [[ -f /usr/bin/zinst ]];then
		head -19 /usr/bin/zinst > ~/zinst
	else
		head -19 $ZinstBaseRoot/vault/Source/bin/zinst > ~/zinst
	fi
tail -n +20 ./zinst_tmp >>  ~/zinst
rm -f ./zinst_tmp
sudo mkdir -p $ZinstBaseRoot/vault/Source/bin
sudo chgrp $zinst_group $ZinstBaseRoot/vault/Source/bin
Number=`ls $ZinstBaseRoot/vault/Source/bin/ |egrep ^zinst.bak. |awk '{print NR}' |tail -1`
	if [[ $Number = ""  ]];
	then
		Number="0"
	fi
sudo mv $ZinstBaseRoot/vault/Source/bin/zinst $ZinstBaseRoot/vault/Source/bin/zinst.bak.$Number 2> /dev/null;
sudo cp zinst $ZinstBaseRoot/vault/Source/bin/zinst;
sudo chgrp $zinst_group $ZinstBaseRoot/vault/Source/bin/zinst;
sudo chmod 775 $ZinstBaseRoot/vault/Source/bin/zinst;
sudo rm -f /usr/bin/zinst;
sudo ln -sf $ZinstBaseRoot/vault/Source/bin/zinst /usr/bin/zinst;
ShowVersion=`sudo cat /usr/bin/zinst |grep ^VERSION | sed -e 's/VERSION=//g'`
echo "Zinst version" $ShowVersion

Command_p="@ Self-update"
echo -e "`date +%Y.%m.%d_%T`\t $WhoStamps : $Command_p - $ShowVersion  " >> $History_LOG

} 

Help_Command(){
echo "------------------------------------------------------------------------------------------------------ "
echo "	zinst	[Command]	[Option Types]		[Target Names]	[-h or -H]	[Targe Host] "
echo "------------------------------------------------------------------------------------------------------ "
echo "		 ssh		[Command]						*Host requires	  "
echo "...................................................................................................... "
echo "		 mcp		[local-files]		[Destination DIR]		*Host requires "
echo "------------------------------------------------------------------------------------------------------ "
echo "		 install				[Package]   "
echo "				[-same]			[Package]	  "
echo "				[-downgrade]		[Package]	  "
echo "				[-stable]		[Package without version]	  "
echo "		 remove					[Package]	  "
echo "				[-force]		[Package]	  "
echo "...................................................................................................... "
echo "		 list					[Blank for list-up]	  "
echo "				[-files]		[Package]	  "
echo "				[-files]		[/Dir/File-name]	  "
echo "				[-zicf]			[Package]	  "
echo "				[-dep]			[Package]	  "
echo "...................................................................................................... "
echo "		 rollback	[-file]			[Order list file for try a rollback as a save file]	  "
echo "		 restore	[-file]			[Saved file_name]	  "
echo "				[-igor]			* Not available yet "
echo "------------------------------------------------------------------------------------------------------ "
echo "		 set					[Blank for list-up]			  "
echo "		 [Package]	-set 			[Package.option=value]  "
echo "------------------------------------------------------------------------------------------------------ "
echo "		 start					[Daemon_name]	  "
echo "		 stop					[Daemon_name]	  "
echo "		 restart				[Daemon_name]	  "
echo "		 on					[Daemon_name]	  "
echo "		 off					[Daemon_name]	  "
echo "...................................................................................................... "
echo "		 crontab	[-e]						  "
echo "				[-l] "
echo "------------------------------------------------------------------------------------------------------ "
echo "		 find		[Blank for list-up]			 "
echo "				[Package]		 "
echo "		 getset		[Package]			 "
echo "------------------------------------------------------------------------------------------------------ "
echo "		 track		[Blank for list-up]			 "
echo "				[Package or hostname]		 "
echo "				[Package or hostname]	[-file] 	 "
echo "				[Package or hostname]	[-file=Export_File_name]	 "
echo "				\"user\" or \"sudo_user\"	 "
echo "				[User_Package_name]	[-file] 	 "
echo "				[User_Package_name]	[-file=Export_File_name]	 "
echo "------------------------------------------------------------------------------------------------------ "
echo "		 history	[Number of Range] "
echo "...................................................................................................... "
echo "		 -pass					 Option for Multi-host password automation"
echo "		 self-update			 "
echo "		 self-config	ip=x.x.x.x host=xxx.xxx.xxx			 "
echo "		 -version			 "
echo "		 *, help		 "
echo "------------------------------------------------------------------------------------------------------ "
echo " -h is target host, -H is targe file of hostlist "
echo " ex) zinst i sample-1.0.0.zinst -h web01.news.kr[1,3]  web[03-12].news[1,3] "
echo " ex) zinst i sample-1.0.0.zinst -H ./server_list.txt "
echo "------------------------------------------------------------------------------------------------------ "
echo " "
### Hidden function for Multi-tasking on multiful host -multi option
### But it's not stable on some function

}

Help_Detail(){
echo "------------------------------------------------------------------------------------------------------ "
echo "	zinst	[Command]	[Option Types]		[Target Names]	[-h or -H]	[Targe Host] "
echo "------------------------------------------------------------------------------------------------------ "
echo " + For remote work "
echo " "
echo "  - Remote control: You can send a command to seperated hosts "
echo "		 ssh		[Command]						*Host requires	  "
echo "...................................................................................................... "
echo " "
echo "  - File copy to remote: You can send a file(s) to seperated hosts(mcp = Multi CoPier) "
echo "		 mcp		[local-files]		[Destination DIR]		*Host requires "
echo " "
echo "------------------------------------------------------------------------------------------------------ "
echo " + For Package "
echo " "
echo "  - Package manage: You can install/remove a package as under the command "
echo "		 install				[Package]   "
echo "				[-same]			[Package]	  "
echo "				[-downgrade]		[Package]	  "
echo "				[-stable]		[Package without version for latest package]	  "
echo "		 remove					[Package]	  "
echo "				[-force]		[Package]	  "
echo "...................................................................................................... "
echo " "
echo "  - Package view: You can see an installed packages/files/index & dependency "
echo "		 list					[Blank for list-up]	  "
echo "				[-files]		[Package]	  "
echo "				[-files]		[/Dir/File-name]	  "
echo "				[-zicf]			[Package]	  "
echo "				[-dep]			[Package]	  "
echo "...................................................................................................... "
echo " "
echo "  - Package rollback: You can try a roll-back the package set by a save file	ex) ~/z/save/zinst-* "
echo "		 rollback	[-file]			[Order list file for roll-back as a save file]	  "
echo "  - Package restore: You can restore the package set by a save file for restore	ex) ~/z/save/zinst-* "
echo "		 restore	[-file]			[Saved file_name]	  "
echo "				[-igor]			* Not available yet "
echo " "
echo "------------------------------------------------------------------------------------------------------ "
echo " + For Configuration "
echo " "
echo "  - Configuration: Zinst can helps to configure the setup without manual modify the Conf-file "
echo "		 set					[Blank for list-up]			  "
echo "							[Package.option=value]			  "
echo " "
echo "  - Configuration with Install: Configure the setup with the package install "
echo "		 [Package]	-set 			[Package.option=value]  "
echo " "
echo "------------------------------------------------------------------------------------------------------ "
echo " + For System manage "
echo " "
echo "  - Daemon control: You can control the daemon from the /etc/init.d/ directory "
echo "		 start					[Daemon_name]	  "
echo "		 stop					[Daemon_name]	  "
echo "		 restart				[Daemon_name]	  "
echo "		 on					[Daemon_name]	  "
echo "		 off					[Daemon_name]	  "
echo "...................................................................................................... "
echo " "
echo "  - Crontab manage: You can touch the cron schduler by zinst "
echo "		 crontab	[-e]						  "
echo "				[-l] "
echo " "
echo "------------------------------------------------------------------------------------------------------ "
echo " + For install available package find "
echo " "
echo "  - Package find "
echo "		 find		[Blank for list-up]			 "
echo "				[Package]		 "
echo " "
echo "------------------------------------------------------------------------------------------------------ "
echo " + For tracking the released package "
echo " "
echo "  - Track the package "
echo "		 track		[Blank for list-up]			 "
echo "				[Package or hostname]		 "
echo "				[Package or hostname]	[-file] 	 "
echo "				[Package or hostname]	[-file=Export_File_name]	 "
echo "				\"user\" or \"sudo_user\"	 "
echo "				[User_Package_name]	[-file] 	 "
echo "				[User_Package_name]	[-file=Export_File_name]	 "
echo "------------------------------------------------------------------------------------------------------ "
echo " + View history "
echo " "
echo "		 history	[Number of Range] "
echo "...................................................................................................... "
echo " "
echo "		 -pass					 Option for Multi-host password automation"
echo "		 self-update			 "
echo "		 self-config	ip=x.x.x.x host=xxx.xxx.xxx			 "
echo "		 -version			 "
echo " "
echo "		 *, help		 "
echo "------------------------------------------------------------------------------------------------------ "
echo " -h is target host, -H is targe file of hostlist "
echo " ex) zinst i sample-1.0.0.zinst -h web01.news.kr[1,3]  web[03-12].news[1,3] "
echo " ex) zinst i sample-1.0.0.zinst -H ./server_list.txt "
echo "------------------------------------------------------------------------------------------------------ "
echo " "
echo " "
echo " "
echo "Example)"
echo "zinst ssh 'cat /etc/hosts;pwd' -h web[01-09].test.com	: Send a command to seperated hosts "
echo " "
echo "zinst mcp ./test.* /data/var/ -h web[01-09].test.com 	: File copy to seperated hosts "
echo " "
echo "zinst install hwconfig -stable			: for package apply as a latest version automatically "
echo " "
echo "zinst install hwconfig-1.0.2.zinst -same		: for overwrite the package as a same version "
echo "zinst i hwconfig-1.0.2.zinst -downgrade			: for downgrade the package as a lower version "
echo " "
echo "zinst list -files hwconfig				: list-up file of the hwconfig package "
echo "zinst ls -files /data/bin/hwconfig			: find a package as a file "
echo "zinst list -zicf hwconfig				: see the index file of package "
echo "zinst ls -dep hwconfig 					: package dependency check "
echo " "
echo "zinst set						: list-up of zinst current setups "
echo "zinst set hwconfig.nameserver1=1.1.1.1			: change the setup nameserver1=1.1.1.1 to the hwconfig "
echo " "
echo "zinst i hwconfig-1.0.2.zinst -set hwconfig.nameserver1=1.1.1.1 -set hwconfig.nameserver2=2.2.2.2 "
echo " : change the setup nameserver1=1.1.1.1 and nameserver2=2.2.2.2 to the hwconfig with package install "
echo " "
echo "zinst restart httpd					: restart the httpd daemon by /etc/init.d/httpd file control "
echo " "
echo "zinst crontab -l 					: list-up the crontab scheduler "
echo "zinst crontab -u root -l			: list-up the crontab scheduler for an user "
echo "zinst cront -e	 					: edit the crontab scheduler "
echo " "
echo "zinst find						: list-up the available file for install "
echo "zinst find hwcon					: list-up the available file for install as you typed "
echo " "
echo "zinst hist						: show the history "
echo "zinst hist 300						: show the 300 lines history "
echo " "
echo "zinst self-update					: zinst command update( *Requires: Package dist server must has a zinst file) "
echo "zinst  self-config ip=x.x.x.x host=xxx.xxx.xxx	: you can change the configuration what you want"
echo " "
echo "zinst help						: Detail view the help "
echo " "
echo "=== For more detail: http://twiki.gsenext.com/bin/view/Main/TheZinst ===" 
echo " "
echo " "

}

History(){
	if [[ $ZPackages != "" ]]
	then
			ZPackages="-$ZPackages"
	fi

tail $ZPackages $History_LOG
}

Pkg_Track(){
TrackManager="track_$ManagerIP"
### Set for Print screen

CheckZPkg=`echo ${PackageArry[0]} | egrep "\/"`
	if [[ $CheckZPkg != "" ]]
	then
		PackageArry[0]=""
	fi

width=102
echo ""
echo "Package has been released to below list - Sort by \"${PackageArry[0]}\""
printf "%$width.${width}s \n" "$Barr$Barr"
printf "%-30s %-50s %-30s \n" "Host" "Package" "Date"
printf "%$width.${width}s \n" "$Barr$Barr"

UserChecker=`echo "${PackageArry[0]}" |grep "user"`
	if [[ $UserChecker = "" ]]; then
		Distributed_package="distributed_package"
	else
		Distributed_package="distributed_package_users"
	fi

ResultPack=`sudo curl -e --url $Dist_server/$TrackManager/$Distributed_package 2> /dev/null |egrep "${PackageArry[0]}"`
FileChecker=`echo $MidPackageArry | awk -F '-file=' '{print $2}'`
OptionExcenptChk=`echo "$ZOptions" | grep "="`
	if [[ $OptionExcenptChk != ""  ]]
	then
		ZOptions=`echo "$ZOptions" | awk -F '=' '{print $1}'`
	fi

	if [[ $FileChecker = ""  ]]
	then
		OutPutFile="$PWD/host.output"
	else
		OutPutFile="$FileChecker"
	fi

	if [[ $ResultPack = "" ]]
	then
		OutTrack=`sudo curl -e --url $Dist_server/$TrackManager/$Distributed_package 2> /dev/null |egrep " ${PackageArry[0]}" | awk '{printf("%-30s",$1); printf("%-50s",$2); printf("%-30s\n",$3)}'`
	else
		OutTrack=`echo "$ResultPack" | awk '{printf("%-30s",$1); printf("%-50s",$2); printf("%-30s\n",$3)}'`
	fi

	### Export data
	if [[ $ZOptions != "-file"  ]] 
	then
		echo "$OutTrack"
	else
		echo "$OutTrack"
		echo "$OutTrack" | awk '{print $1}' | sort -u > $OutPutFile
		printf "%$width.${width}s \n" "$Barr$Barr"
		echo " Hostlist file has been created to $OutPutFile "
	fi

printf "%$width.${width}s \n" "$Barr$Barr"
}


Pkg_Getset(){
### Set value get from the package
GetSPkg=$ZPackages
GetSPkgArry=( $GetSPkg )
CurrPkgDiR="$ZinstBaseRoot/vault/zinst/index"
	### Package list up
	### Loop for each package sort
	GetSCounter=0
	while [ $GetSCounter -lt ${#GetSPkgArry[@]} ]
	do
			IndexFileChk=`ls $CurrPkgDiR/${GetSPkgArry[$GetSCounter]}.zicf 2> /dev/null`
			PackageReal=`echo "${GetSPkgArry[$GetSCounter]}" | awk -F'-' '{print $1}'`
			if [[ $IndexFileChk = "" ]]
			then
				wget "$Dist_server/checker/${GetSPkgArry[$GetSCounter]}.zicf" --directory-prefix=$CurrPkgDiR 2> /dev/null
				CheckSet=(`cat $CurrPkgDiR/${GetSPkgArry[$GetSCounter]}.zicf 2> /dev/null |grep "^ZINST set " | sed -e 's/ZINST set //g' | awk '{for (i=2;i<=NF;i=i+1) print "'$PackageReal'."$1"="$i}'`)
			else
				CheckSet=(`cat $CurrPkgDiR/${GetSPkgArry[$GetSCounter]}.zicf 2> /dev/null |grep "^ZINST set " | sed -e 's/ZINST set //g' | awk '{for (i=2;i<=NF;i=i+1) print "'$PackageReal'."$1"="$i}'`)
			fi

	let GetSCounter=$GetSCounter+1
	done

	### Print output
	SetOutCount=0
	while [ $SetOutCount -lt ${#CheckSet[@]} ]; do
		echo ${CheckSet[$SetOutCount]}
	let SetOutCount=$SetOutCount+1
	done
}

##############################  Command menu  ###################################
	case "$CommandX" in
	i*)
		Pkg_Install $* 	;;
	set)
		Pkg_Set $*	;;
	gets*)
		Pkg_Getset $*	;;
	r*m*)
		Pkg_Remove $*	;;
	start)
		Daemon_Control $*	;;
	stop)
		Daemon_Control $*	;;
	restart)
		Daemon_Control $*	;;
	on)
		Daemon_Control $*	;;
	off)
		Daemon_Control $*	;;
	his*)
		History	;;
	self-up*)
		Zinst_Selfupdate ;;
	self-conf)
		Zinst_SelfConfig ;;
	cront*)
		Cront_Command $* ;;
	l*s*)  
		Pkg_List $*	;;
	roll*)
		Pkg_Rollback $*	;;
	restore)
		Pkg_Restore $*	;;
	find)
		Pkg_Find $*	;;
	track)
		Pkg_Track $* ;;
	-v*)
		Zinst_Version 	;;
	*help)
		Help_Detail	;;
	*)
		Help_Command	;;
	esac
